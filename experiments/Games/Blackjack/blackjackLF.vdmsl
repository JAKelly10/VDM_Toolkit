module BlackjackLF
imports 
from MATH
	operations
		rand renamed rand;
,
from IO
	operations
	  println renamed println;
		printf renamed printf; 
exports all

definitions


types

  --@doc The two possible players in the game
  Player = <Dealer> | <Player>;
 
  --@doc Used to store the seed for random card selection
  --@LF you can use MATH.rand / seed for that?
  Seed = nat;
  
  --@doc The 4 possible card suits
  --@LF nice way of narrowing down; why not do the same for values
  Suit = char
  inv s == s in set {'C', 'D', 'H', 'S'};
  
  --@LF nat1 narrowed between 2...10 is better than int
  NumberCard = nat1
  inv v == v in set ALL_NUMBEREDCARDS;
  
  --@LF just like suit
  FaceCard = char
  inv fc == fc in set ALL_FACECARDS;

	--@LF how much each card is worth; argubaly, NumberCard = CardPoints \ {11}
	CardPoints = nat1
	inv cp == cp in set ALL_POINTS;

  --@doc The possible card values (including picture cards and aces) 
	Card = NumberCard | FaceCard;  
	
	--@LF a total map that ensures every card has corresponding number of points
	--	  caveat: card + works if ALL_NUMBEREDCARDS inter ALL_FACECARDS = {}, which they are 
	GamePoints = map Card to CardPoints
	inv gp == card dom gp = card ALL_NUMBEREDCARDS + card ALL_FACECARDS;
 
  --@doc Stores information about a card
  --@LF nice one
	PlayingCard ::
	  value: Card
	  suit:  Suit;
	
	--@LF game shouldn't allow you score more than 31?
	Score = nat
	inv s == s <= MAX_SCORE;
	 
	--@LF you want to have a proper deck (no cheating) 
	Deck = set of PlayingCard
	inv deck == card deck = DECK_SIZE;
	  
	--@LF you can't have more than 7 cards? (2+3+4+5+6=20)
	--	  you could also do somerhing that sums the cards scores so that you must always be within 21 but the last? 
	Hand = seq of PlayingCard
	inv h == --@LF cannot have repeated cards
					 len h = card elems h
					 and
					 --@LF can't play more than 7 cards
					 len h <= 7
					 and
					 --@LF all but last card for allowing getting up to but not beyond blackjack before you pick another cards
					 sum_score(h(1,...,len h -1)) < BLACKJACK;

functions
	sum_score: seq of PlayingCard -> nat
	sum_score(ps) == 
		if ps = [] then 
			0
		else
			GAME_POINTS((hd ps).value) + sum_score(tl ps)
	measure
		len ps;
			
values

	BLACKJACK					: nat1 = 21;
	MAX_CARDS					: nat1 = 52;
	MAX_SCORE					: nat1 = 31;
	ALL_POINTS				: set1 of nat1 = {2,...,11};
	ALL_NUMBEREDCARDS : set1 of nat1 = ALL_POINTS \ {11};
	ALL_FACECARDS			: set1 of char = {'J', 'K', 'Q', 'A'};
	
  --@doc Stores the suits
  --@LF by convention, it's good idea to have constants as capital to "see" difference better
  SUITS: set of Suit = {'C', 'D', 'H', 'S'};

	DECK_SIZE: nat1 = (card ALL_NUMBEREDCARDS + card ALL_FACECARDS) * card SUITS;--52;

	--@LF to ensure the card for the total GamePoints map works; check at the state 
	CARDS_CONSISTENCY : bool = /*ALL_FACECARDS inter ALL_NUMBEREDCARDS = {} and*/ DECK_SIZE = MAX_CARDS;
  
  --@doc Stores the numeric value assigned to each card's face value
  --@LF I see what you are doing here: the game value for a card. Perhaps a type?
  --@LF you might want this as a function, where you ensure that all cards have points assigned to them? 
  FACEVALUES0: map Card to CardPoints = {
    2 |-> 2, 3 |-> 3, 4 |-> 4, 5 |-> 5, 6 |-> 6, 7 |-> 7, 8 |-> 8,
    9 |-> 9, 10 |-> 10, 'J' |-> 10, 'Q' |-> 10, 'K' |-> 10, 'A' |-> 11
  };
  
  --@LF algebraically is usually better / easier; type invariant for GamePoints forces you to 
  --		always have a complete map, which you already have.
  --
  --		just played with operators: create a n |-> n map for all numbered cards;
  --		then unite them with face cards mapped to 10 for all face cards;
  --		finally update the ace for 11; what about 'A' being valued at 1?
  GAME_POINTS: GamePoints = 
  	{ n |-> n | n in set ALL_NUMBEREDCARDS } 
  	munion
  	({ f |-> 10 | f in set ALL_FACECARDS } ++ { 'A' |-> 11 });

functions
	flat_set_seq: set of seq of PlayingCard -> set of PlayingCard
	flat_set_seq(pcs) == dunion { elems h | h in set pcs }
	--post
	--	[ len pcs(i) | i in set pcs ]
	;
	  	
state Game of 
  
  --@doc The seed of the game
  --@LF shouldn't this be type Seed?
  seed: Seed
  
  --@doc The current deck in play
  --@LF why is this a map?Why not a set of PlayingCard? You can calculate their corresponding amoung with the
  --		FACEVALUES map of points above?
  deck: map PlayingCard to nat
  
  deck0: Deck 
  
  --@doc The current scores
  --@LF add the score to ensure you don't allow play overshooting
  score: map Player to Score
  
  --@doc The current hands of each player
  --@LF nice one. Perhaps have seq of PlayingCard a type too? 
  hands: map Player to Hand
  
  --@LF ???
  targetScore: nat1

--@LF shouldn't you have aninvariant about players with score having hands? And perhaps
--		that all played cards in hands cannot be on the deck?
inv mk_Game(-, deck, deck0, score, hands, ts) == true
	/*
	--@LF all played cards cannot be in the deck, ideally it was "dunion rng hands" or "conc rng hands"
	--		but that doesn't type check, so we have to define it ourselves. 
	flat_set_seq(rng hands) inter deck0 = {} and flat_set_seq(rng hands) inter dom deck = {}
	and
	card dom deck = 13--??? 
	and
	--@LF everyone with a score has to have a hand of playing csrds?
	dom score = dom hands
	--and
	--dom hands = ALL_PLAYERS ??? 
	and
	--@LF make sure card constants consistency works
	CARDS_CONSISTENCY */
  
--@doc Create the game, with 4 standard decks
init s == s = mk_Game(
  	1, 
  	--@LF what's the 4 in this mapping? 
    { mk_PlayingCard(val, suit) |-> 4 | val in set dom FACEVALUES0, suit in set SUITS },
    { mk_PlayingCard(val, suit) | val in set dom GAME_POINTS, suit in set SUITS },
    { x |-> 0 | x : Player}, 
    { x |-> [] | x : Player},
    10)
  
 end;

functions
  --@doc Generate the next random number
  nextSeed: Seed -> Seed
  nextSeed(s) == ((63 * s) + 257) mod 5321; 

  --@doc Calculate the total value of a hand
  --@LF I kind of defined the same function above I think :-)
  totalHand: seq of PlayingCard -> nat
  totalHand(s) == 
    if len s = 0 then 0
    else FACEVALUES0((hd s).value) + totalHand(tl s)
  measure len s;


operations
  --@doc Set the random seed
  setSeed(n: Seed) ==
  	seed := n
  ext wr seed
  post
  	--@LF kind of obvious but worth stating
  	seed = n;
  
  --@doc Remove a card from the deck
  removeCard(c: PlayingCard) ==
    deck := deck ++ { c |-> deck(c) - 1 }
  ext 
  	wr deck
  --@LF again obvious but important
  pre
  	c in set dom deck
  post
  	deck(c) < deck~(c);
  
  --@doc Retrieve a random card from the deck
  nextCard: () ==> PlayingCard
  nextCard() == (
    dcl chosenCard: PlayingCard,
        cardAsSequence: seq of PlayingCard := [],
        
        --@doc Get all cards with a quantity of more than 0 in the deck
        cardsRemaining: map PlayingCard to nat := 
          { x |-> deck(x) | x in set dom deck & deck(x) > 0 };
    
    --@doc Update the seed
    setSeed(nextSeed(seed));
    
    --@doc Convert the set to a sequence (we need this in order to pick from a random index)
    while card dom cardsRemaining > 0 do (
      let a in set dom cardsRemaining in (
      cardAsSequence := cardAsSequence ^ [a];
      cardsRemaining := {a} <-: cardsRemaining;
      )
    );

		--@doc Select a random card from the sequence
    chosenCard := cardAsSequence(seed mod len cardAsSequence);
    
    --@doc Remove the card from the deck
    removeCard(chosenCard);
    
		return chosenCard;
  );
  
  --@doc Add a card to a player's hand
  addCard(p: Player, c: PlayingCard) == 
    hands(p) := hands(p) ^ [c]
  ext
    wr hands
  ---@LF for statye invariant and game?
  pre
  	--@LF player is known and card is new; card is known afterwards
  	p in set dom hands
  	and
  	not c in set elems hands(p)
 	post
 		c in set elems hands(p);
    
  --@doc Increment a player's score
  addPoint(p: Player) == 
    score(p) := score(p) + 1
  ext
    wr score
  pre
  	p in set dom score
  post
  	score(p) > score~(p);
    
  --@doc Play the dealer's turn
  dealersTurn() == (
    printf("Dealer's hand is worth %s\n", [totalHand(hands(<Dealer>))]);
  
    --@doc Check if the dealer has blackjack
    if totalHand(hands(<Dealer>)) = 21 then (
      println("Dealer has blackjack");
      addPoint(<Dealer>);
      
      --@doc If the dealer has blackjack, check if they have reached the target score.
      if score(<Dealer>) = targetScore then
        printf("Dealer wins game %s to %s", [score(<Player>), score(<Dealer>)])
      else
        --@doc Otherwise, play the next round
        playRound();
    ) else (
    
      --@doc Deal cards until we have a hand value greater than the player
      while totalHand(hands(<Dealer>)) < totalHand(hands(<Player>)) do (
        dcl new: PlayingCard := nextCard();
        addCard(<Dealer>, new);
        printf("Dealer deals %s\n", [FACEVALUES0(new.value)]);
      );
      
      --@doc If we've beaten the player, and we haven't bust, we have won
      if totalHand(hands(<Dealer>)) <= 21 then (
        printf("Dealer wins round %s to %s", [totalHand(hands(<Dealer>)), totalHand(hands(<Player>))]);
        
        --@doc Check if the dealer has reached the target score.
        if score(<Dealer>) = targetScore then
          printf("Dealer wins game %s to %s", [score(<Player>), score(<Dealer>)])
        else
          --@doc Otherwise, play the next roudn
          playRound();
          
      --@doc The dealer has bust, the player has won the round
      ) else (
        printf("Dealer has bust, Player wins round %s to %s", [totalHand(hands(<Player>)), totalHand(hands(<Dealer>))]);
        
        --@doc Check if the player has reached the target score
        if score(<Player>) = targetScore then
          printf("Player wins game %s to %s", [score(<Player>), score(<Dealer>)])
        else
          --@doc Otherwise, play the next round
          playRound();
      )
    )
  )
  ext
    wr score
    wr hands
    rd targetScore;
    
  --@doc Pass the play to the dealer
  stand() == (
    dealersTurn();
  );
  
  --@doc Draw a new card
  hit() == (
    dcl new: PlayingCard := nextCard();
    printf("You were dealt %s\n", [FACEVALUES0(new.value)]);
    addCard(<Player>, new);
    
    --@doc Check if the player can draw another card
    if totalHand(hands(<Player>)) < 21 then
      printf("Your hand is worth %s, type \"p stand()\" or \"p hit()\"", [totalHand(hands(<Player>))])
    
    --@doc Check if the player has blackjack
    elseif totalHand(hands(<Player>)) = 21 then (
      println("Player has blackjack");
      addPoint(<Player>);
       
       --@doc Check if the player has reached the target score
      if score(<Player>) = targetScore then
        printf("Player wins game %s to %s", [score(<Player>), score(<Dealer>)])
      else
        --@doc Otherwise, play the next round
        playRound()
     
    --@doc The player has bust, the dealer has won the round
    ) else (
      printf("Player has bust, Dealer wins round %s to %s\n", [totalHand(hands(<Dealer>)), totalHand(hands(<Player>))]);
      addPoint(<Dealer>);
      playRound(); 
    );
  )
  ext 
    wr score
    rd hands
    rd targetScore;
  
  --@doc Play the next round
  playRound() == (
  
    hands(<Dealer>) := [];
    hands(<Player>) := [];
    println("\nDealing Cards...\n");
    addCard(<Player>, nextCard());
    addCard(<Dealer>, nextCard());
    addCard(<Player>, nextCard());
    addCard(<Dealer>, nextCard());

    printf("Your hand is worth %s, type \"p stand()\" or \"p hit()\"", [totalHand(hands(<Player>))]);
    
  );
  
  
  -- ========================== ENTRY OPERATION ==============================
  
  --@doc Start the game
  blackjack() == (
    println("====================================================================");
    println("                         VDM Blackjack                              ");
    println("====================================================================");
    --setSeed(78167813);
    setSeed(rand(nextSeed(seed)));
    printf("Configuration: {seed: %s, targetScore: %s}\n\n", [seed, targetScore]);
    
    playRound();
  );
  
end BlackjackLF