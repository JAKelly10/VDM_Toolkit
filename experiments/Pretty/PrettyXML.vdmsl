module PrettyXML
imports 
from FastPrettyPrinter
    values 
        Dnil renamed Dnil;
        line renamed line;
    types 
        DOC renamed DOC;
        String renamed String;
    functions 
        group renamed group;
        folddoc renamed folddoc;
        doc_concat renamed doc_concat; 
        nest renamed nest;
        text renamed text; 
        bracket renamed bracket;
        pretty renamed pretty;
        fill renamed fill;
exports all
    -- functions
    --     testtree: nat -> String;
    --     testtree': nat -> String;
definitions 
types 
    XMLElement :: 
        n: String
        a: seq of XMLAttribute
        x: seq of XML;

    XMLText ::
        s: String;

    XMLAttribute ::
        n: String
        v: String;

    XML = XMLElement | XMLText;
    
functions 

    seq_map[@S, @T]: (@S -> @T) * seq of @S -> seq of @T
    seq_map(f, xs) == [ f(xs(i)) | i in set inds xs ];

    words: String -> seq of String 
    words(s) == [s]; --copy split from support? 

    -- --@Warning(5013)
    -- showXML: XML -> DOC 
    -- showXML(x) == folddoc(doc_concat, showXMLs(x));

    -- showXMLs: XML -> seq of DOC
    -- showXMLs(x) ==
    --     cases x:
    --         mk_XMLElement(n, a, []) -> [doc_concat(text("<"), doc_concat(showTag(n, a), text("/>")))],
    --         mk_XMLElement(n, a, c)  -> [doc_concat(
    --                                         text("<"), 
    --                                         doc_concat(
    --                                             showTag(n, a), 
    --                                             doc_concat(
    --                                                 text(">"),
    --                                                 doc_concat(
    --                                                     showFill[XML](showXMLs, c),
    --                                                     doc_concat(
    --                                                         text("</"),
    --                                                         doc_concat(
    --                                                             text(n),
    --                                                             text(">")
    --                                                         )
    --                                                     )
    --                                                 )
    --                                             )
    --                                         )
    --                                     )],
    --         mk_XMLText(s)           -> seq_map[String, DOC](text, words(s))
    --     end;

    -- showAtts: XMLAttribute -> seq of DOC 
 
    -- showAtts(mk_XMLAttribute(n, v)) == [doc_concat(text(n), doc_concat(text("="), text(quoted(v))))];

    -- quoted: String -> String 
    -- quoted(s) == "\"" ^ s ^ "\"";

    -- showTag: String * seq of XMLAttribute -> DOC
    -- showTag(n, a) == doc_concat(text(n), showFill[XMLAttribute](showAtts, a));

--     showFill[@T]: (@T -> seq of DOC) * seq of @T -> DOC 
--     showFill(f, xs) ==
--         if xs = [] then Dnil else bracket("", ..., "");

--     testtree: nat -> String 
--     testtree(w) == pretty(w, showTree(tree));

--     testtree': nat -> String 
--     testtree'(w) == pretty(w, showTree'(tree));

-- values

--     tree: Tree = mk_Tree("aaa", 
--         [
--             mk_Tree("bbb", [mk_Tree("ccc", []), mk_Tree("dd", [])]),
--             mk_Tree("eee", []),
--             mk_Tree("ffff", 
--             [
--                 mk_Tree("gg", []),
--                 mk_Tree("hhh", []),
--                 mk_Tree("ii", [])
--             ])
--         ]);

end PrettyXML