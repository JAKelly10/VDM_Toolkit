-- $Id$
module Heap0
exports all

--- test
definitions 
	
types 
	Loc = nat;
	Free0 = set of Loc;

values
   ALL_LOCS : Free0 = {0,...,10};
   ALL_LOCSEQ : set of seq of Loc = { i | i : seq of Loc };

functions 

isSequential: seq of nat -> bool
isSequential(s) == exists i, j in set ALL_LOCS & elems s = {i,...,j};

has_seq: seq of Loc * nat * Free0 -> bool
has_seq(s, n, f) ==
	isSequential(s) and
	elems s subset f and
	len s = n;


state Heap0St of
	free0: Free0
-- TODO Define state here
end 

operations 

NEW0(req: nat) res: set of Loc
	ext wr free0
    pre exists s in set ALL_LOCSEQ & has_seq(s, req, free0)
	post exists s in set ALL_LOCSEQ & 
				(has_seq(s, req, free0~) and
				 res = elems s and
				 free0 = free0~ \ res);

DISPOSE0(ret: Free0)
	ext wr free0
	pre ret inter free0 = {}
	post free0 = free0~ union ret;
end Heap0