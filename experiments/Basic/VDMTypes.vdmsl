module VDMTypes
exports all
definitions 

values
	MAX: nat1 = 10;
	
types
	MyType = nat1 inv n == n <= MAX;
	
	MySet0 = set of nat1 inv s == (forall i in set s & i <= MAX) and s <> {};	
	MySet  = set of MyType inv s == s <> {};
	MySet1 = set1 of MyType;
	
	MySeq0= seq of nat1 inv s == (forall i in set inds s & s(i) <= MAX);
	MySeq = seq of MyType inv s == card elems s = len s;
	
	MySeqSeq0 = seq of seq of MyType;
	MySeqX    = seq of MyType;
	MySeqSeq  = seq of MySeqX;
	
	Enum = <E1> | <E2>;

	MyMapOld = map MyType to Enum
	inv m == dom m subset {MAX div 2,...,MAX} ;
	
	--@doc done on the online synchronous session
	MyMap0 = map MyType to set1 of (nat * Enum) 
	inv m == dom m subset {MAX div 2,...,MAX} 
					 and
					 (forall t in set dom m & forall v in set m(t) & v.#1 <= MAX);
	
	MyMap = map MyType to set1 of (MyType * Enum) 
	inv m == dom m subset {MAX div 2,...,MAX} ;
	
	MyRec ::
		x: MyType
		s: MySet
		l: MySeq
		m: MyMap
	inv mk_MyRec(x,s,l,m) == 
		x in set dom m inter elems l inter s
		and
		x in set dom m and x in set elems l and x in set s;
	
	MyUnion = MyRec | MyMap;

values
	mymap_test: map MyType to Enum = {3 |-> <E1>, 4 |-> <E2>, 2 |-> <E1>, 1 |-> <E2> };
	empty_map: map MyType to Enum = {|->};
	
	mymap_testi: MyMap = {5 |-> {mk_(1,<E1>)}};
	myrecord: MyRec = mk_MyRec(5,{5},[5], {5 |-> {mk_(1,<E1>)}});
	
			 
end VDMTypes