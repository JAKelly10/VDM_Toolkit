module XOExam
imports from IO all
exports all
definitions
values
	SIZE:nat1	= 3;						-- The size of the board (3x3)
	
	MAX:nat1	= SIZE * SIZE;				-- The maximum number of moves
	
	PLAYERS		= { p | p:Player };			-- The set of all Players

types
	Player = <NOUGHT> | <CROSS> ;			-- Just two players
	
	Result = Player | <DRAW> | <UNFINISHED>;-- Possible game results

	-- Write an invariant for valid positions.
	Pos ::									-- A position for a move
		row : nat1
		col : nat1
	inv p ==
		p.row <= SIZE and p.col <= SIZE;	-- Row/col must be on the board

	Game = map Pos to Player;				-- A game (who has moved where)
	
	-- Write an invariant for valid moves
	Moves = seq of Pos								-- A legal game play sequence
	inv moves ==
		len moves = card elems moves and			-- Has no duplicated moves
		len moves > card PLAYERS * (SIZE - 1) and	-- Has minimum moves to win 
		len moves <= MAX;							-- Hasn't too many moves

	PlayOrder = seq1 of Player				-- The order of play of the players
	inv order ==
		len order = card elems order and	-- No duplicates in the list
		elems order = PLAYERS				-- Order contains all players



values	
	-- Board has maximum size, our case 3
    BOARD:set of nat1 = {1, ..., SIZE};
	
	-- All rows is a set of sets using comprehension, where the rows are bound 
	-- by the outermost set (i.e. columns vary first, rows vary later).
	-- = {{mk_Pos(1,1), mk_Pos(1,2), mk_Pos(1,3)}, 
	--	  {mk_Pos(2,1), mk_Pos(2,2), mk_Pos(2,3)},
	--	  {mk_Pos(3,1), mk_Pos(3,2), mk_Pos(3,3)}
	--
	--     C1 C2 C3		C1 C2 C3	C1 C2 C3
	-- R1   x  x  x
	-- R2      			 x  x  x
	-- R3         					 x  x  x
	--
	-- All cols is a set of sets using comprehension, where the columns are bound 
	-- by the outermost set (i.e. rows vary first, columns vary later).
	-- = {{mk_Pos(1,1), mk_Pos(2,1), mk_Pos(3,1)}, 
	--	  {mk_Pos(1,2), mk_Pos(2,2), mk_Pos(3,2)},
	--	  {mk_Pos(1,3), mk_Pos(2,3), mk_Pos(3,3)}
	--
	--     C1 C2 C3		C1 C2 C3	C1 C2 C3
	-- R1   x  				x			   x	
	-- R2   x   			x  			   x		
	-- R3   x      			x		 	   x
	--
	-- Downward diagonal is a single set positions of equal row / columns
	-- = {mk_Pos(1,1), mk_Pos(2,2), mk_Pos(3,3)}
	--
	--     C1 C2 C3
	-- R1   x
	-- R2      x
	-- R3         x
	--
	-- Upward diagonal is a single set of positions of equal row / columns
	-- = {mk_Pos(3,1), mk_Pos(2,2), mk_Pos(1,3)}
	--     C1 C2 C3
	-- R1         x
	-- R2      x
	-- R3   x      
    --
    -- Next we combine them all together in the set of set of winning line positions
    -- (i.e. winning lines are a set of all the individual set of winning positions)
	-- = {
	--    {mk_Pos(1, 1), mk_Pos(1, 2), mk_Pos(1, 3)}, -- ALL_ROW_1
	-- 	  {mk_Pos(1, 1), mk_Pos(2, 1), mk_Pos(3, 1)}, -- ALL_COL_1
	--    {mk_Pos(1, 1), mk_Pos(2, 2), mk_Pos(3, 3)}, -- DOWN_DIAGONAL
	--    {mk_Pos(1, 2), mk_Pos(2, 2), mk_Pos(3, 2)}, -- ALL_COL_2
	--    {mk_Pos(1, 3), mk_Pos(2, 2), mk_Pos(3, 1)}, -- UP_DIAGONAL
	--    {mk_Pos(1, 3), mk_Pos(2, 3), mk_Pos(3, 3)}, -- ALL_COL_3
	--    {mk_Pos(2, 1), mk_Pos(2, 2), mk_Pos(2, 3)}, -- ALL_ROW_2
	--    {mk_Pos(3, 1), mk_Pos(3, 2), mk_Pos(3, 3)}  -- ALL_ROW_3
	--   }	
	--
	-- Spelling values out like this is error prone and time consuming. It also makes
	-- expanding the game (i.e. 3D or bigger board) more difficult. We could instead
	-- use the following set comprehension expressions. They are equivalent.
	-- (i.e. in debug console "print WINNING_LINES = EXPLICIT_WINNING_LINES" yields "true")
     
	
	ALL_ROWS		 : set of set of Pos = {{ mk_Pos(r, c) | c in set BOARD } | r in set BOARD };
	ALL_COLS		 : set of set of Pos = {{ mk_Pos(r, c) | r in set BOARD } | c in set BOARD };
	DOWNWARD_DIAGONAL: 		  set of Pos = { mk_Pos(x, x) | x in set BOARD };
	UPWARD_DIAGONAL	 : 		  set of Pos = { mk_Pos(x, SIZE-x+1) | x in set BOARD };
	WINNING_LINES    : set of set of Pos = dunion 
											-- overall expression: set of set of set of Pos -> set of set of Pos	
											{	ALL_ROWS,			  -- set of set of Pos
												ALL_COLS,			  -- set of set of Pos
												{DOWNWARD_DIAGONAL},  -- set of Pos: need exrta {} 
												{UPWARD_DIAGONAL}			
											};
											
	EXPLICIT_WINNING_LINES: set of set of Pos = 
					   {
					    {mk_Pos(1, 1), mk_Pos(1, 2), mk_Pos(1, 3)}, -- ALL_ROW_1
					 	{mk_Pos(1, 1), mk_Pos(2, 1), mk_Pos(3, 1)}, -- ALL_COL_1
					    {mk_Pos(1, 1), mk_Pos(2, 2), mk_Pos(3, 3)}, -- DOWN_DIAGONAL
					    {mk_Pos(1, 2), mk_Pos(2, 2), mk_Pos(3, 2)}, -- ALL_COL_2
					    {mk_Pos(1, 3), mk_Pos(2, 2), mk_Pos(3, 1)}, -- UP_DIAGONAL
					    {mk_Pos(1, 3), mk_Pos(2, 3), mk_Pos(3, 3)}, -- ALL_COL_3
					    {mk_Pos(2, 1), mk_Pos(2, 2), mk_Pos(2, 3)}, -- ALL_ROW_2
					    {mk_Pos(3, 1), mk_Pos(3, 2), mk_Pos(3, 3)}  -- ALL_ROW_3
					   }	

functions
	-- Given a game map, return the set of moves played so far 
	movesSoFar: Game -> set of Pos
	movesSoFar(g) == 
		dom g;
	
	-- Given a game map, return the number of moves played so far	
	moveCountSoFar: Game -> nat
	moveCountSoFar(g) ==
		card movesSoFar(g);
	
	-- Given a game map, return the number of moves left to play	
	moveCountLeft: Game -> nat
	moveCountLeft(g) ==
		MAX - moveCountSoFar(g);
	
	-- Given a game map and a player, return set of played positions by given player
	movesForPlayer: Game * Player -> set of Pos
	movesForPlayer(g, p) == 
		dom (g :> {p})
		--{ pos | pos in set dom g & g(pos) = p }
		;

	-- Given a game map and a player, return whether the player won the game or not
	hasWon: Game * Player -> bool
	hasWon(g, p) ==
		let moves = movesForPlayer(g, p) in
			exists line in set WINNING_LINES &
				line subset moves;

	-- Given a game map, return whether there is a unique winner
	isWon: Game -> bool
	isWon(g) ==
		exists1 p:Player & hasWon(g, p);

	-- Given a game map, return whether there is no winner 
	-- (i.e. no one won, and there are no moves left) 
	isDraw: Game -> bool
	isDraw(g) ==
		not isWon(g) and moveCountLeft(g) = 0;

	-- Given a game map, return whether the game is still being played
	-- (i.e. it's not the case a player won or a draw was reached).
	isUnfinished: Game -> bool
	isUnfinished(g) ==
		not isWon(g) and not isDraw(g);

	-- Given a game map, return THE player tha whas won, if any
	whoWon: Game -> Player
	whoWon(g) ==
		iota p: Player & hasWon(g, p)
	pre isWon(g);

	whoWonG(g: Game) p: Player
	pre isWon(g)
	post exists1 x: Player & hasWon(g, x) and x = p;

    makeMove: Game * Player * Pos -> Game
    makeMove(game, p, pos) ==
    	game munion { pos |-> p}
    pre pos not in set movesSoFar(game) and
    	moveCountLeft(game) > 0
    post moveCountSoFar(RESULT) = moveCountSoFar(game)+1;
     
state Sigma of
	game : Game		-- The game board, initialized by the play operation
end

operations
	--run: () ==> ()
	--run() == IO`println(WINNING_LINES);

	move: Player * Pos ==> ()
	move(p, pos) ==
		game(pos) := p
	pre pos not in set movesSoFar(game) and
		moveCountLeft(game) > 0
	post game = game~ munion {pos |-> p} and
		 moveCountSoFar(game) = moveCountSoFar(game~) + 1;


	play: PlayOrder * Moves ==> Player | <DRAW> | <UNFINISHED>
	play(playorder, moves) ==
	(
		dcl order:PlayOrder := playorder;	-- hd order is always next to play
		game := {|->};

		for m in moves do
			let player = hd order in
			(
				--move(player, m);
				game := makeMove(game, player, m);

				if isWon(game) then
					return whoWon(game)
				elseif isDraw(game) then
					return <DRAW>
				else
					order := tl order ^ [player]
			);

		return <UNFINISHED>
	)
	post if RESULT = <DRAW> then isDraw(game)
		 else if RESULT = <UNFINISHED> then isUnfinished(game)
		 else RESULT = whoWon(game);
		 
end XOExam