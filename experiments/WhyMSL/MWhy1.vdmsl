module MWhy1
exports all
definitions 

types
------------------------------------------------------------------------------------
-- VDM-SL file for current version of MWhy as in the VSTTE-2014 paper.
-- Notice that Overture reserved words used in the model are suffixed with "_".
--
-- *************
-- TODO
-- *************
-- 1) add type invariants
-- 2) sort out issues with Id / token types (see warning)
-- 3) what's difference between TyDefn and signature?
-- *************

	Sigma :: bdm : map BdId to Body
			     bdrels : map BdId to set of (BdId * Relationship);
			
	Body :: --uses 			: set of BdId 
					domain		: Domain
					functions_: map FnId to FnDefn
					--types_		: map TyId to TyDefn
					types_	  : set of TyId
					results		: map ConjId to Conjecture
					strats		: map StratId to Strategy;
			
	FnDefn :: type 	: Signature
					  tags  : set of FnTag
					  defn	: [Definition];
			  		  
	Conjecture :: what 		   : Judgement
							  role 		   : Role 
							  justifs	   : map JusId to Justification
							  specialises: [ConjId]
							  provenance 	: seq of (Origin | Why)
						    emphTps			: map TyId to nat 
						    						--map BdId to nat
						    emphFns		  : map FnId to nat
						    --discourse		: set of TyId
						    --tags        : map (ConjId | FnId | VarId) to Tags
						    --other				: bool -- in lieu	of "..."
						    ;
						  
	Judgement = Assertion | Sequent;
	
	Sequent :: hyps : seq of Judgement
						 goal : Judgement;
						 
	Justification :: by_	    : StratId --(ConjId | ToolOp)
									 subgoals	: seq of ConjId	
									 --binding  : map Id to Id
									 ;
						  
  Tags = <STATE> | <INV> | <PRE> | <POST> -- | ...
  ;
						  
	Role = <Axiom> | <Trusted> | <Lemma> | <Subgoal> -- | ...
	;
	
	FnTag = <Inv> | <Pre> | <Post> -- | ...
  ;
  	
	Domain = <Rail> | <Aerospace> | <DataStructures> | <Library> | <Whatever> -- | ...
	;
	
	Strategy :: intent			: [Why]
							tool				: (ConjId | ToolId)
							script		  : [ToolInput]
							--matcher			: Weightings 
							--matches		  : map MTerm to nat
							weightings	: map MTerm to nat
							mvars				: seq of MVar
							specialises	: [StratId]
							;
		 
	ToolIp :: name 		: Tool
						support	: set of ConjId
						other		: bool;
						
	Tool = <Sledgehammer> | <SMT> | <Simplify> | <Tinker> | <Auto> -- |...
	;
	
	Relationship = <Specialisation> | <Morphism> | <IsoMorphism> |
								 <Inherits> | <Sub> | <Similarity> -- | ...
	;
	
	MTerm = LExpr | Atomic ;
	
	MVar = token;
	
	LExpr = token; -- L /\ L | L \/ L | ~L 
	
	Atomic = token; --FA | JA | SA ; 
	
	--FA = ProvenanceTest | MaxTp | MaxTf ;
	
-- TODO: finish their specification! 
	Assertion = token; -- use Term below?
	ToolOp = token;
	Origin = token;
	Why = token;
	TyDefn = token;
	Signature = token;
	Definition = token;
	Weightings = token;
	ToolInput = token;
	ToolId = token;
	
--************
--  WARNING			  
--************
-- Overture token type management is poor in the sense that it
-- doesn't instantiate different types (i.e. mk_BdId("leo")=mk_FnId("leo"))
-- when it shouldn't (according to my understanding of VDM at least).
--
-- I've created for the older WhM.vdmsl models a theory for Id (Token)
-- management that enables nicer / proper animation / debugging of models.
-- If needed use here (see WhyMIds.vdmsl).
--************
	BdId = token;
	FnId = token;
	TyId = token;
	ConjId = token;
	StratId = token;
	JusId = token;
	
-- *******
-- Suggested specification for Assert (or term) language
-- (with thanks to Mural's indices idea).
-- *******
--- Auxiliary term structure 
---		* no dependendency on any expr/pred term structure - use Indices.
	
	VarId = token;
	Value = token;
	
	-- SEE MURAL App C!
	TermData ::
		bv: set of VarId	-- bounded variables
		fv: set of VarId	-- free variables
			inv td == td.bv inter td.fv = {} and
					  td.bv union td.fv <> {};

	-- this information is usually easily collectable on the system doing proof;
	-- to avoid term-structure dependency, we expect to have access to them here.
	Atom :: 
		vars: TermData	-- information of interest?
		body: token;	-- abstract structure

	-----------------------
	-- Expr tree (implicit)
	Expr ::
		exp: Atom		-- expression structure
		typ: Signature	-- type information
		val: [Value];	-- current bindings, if any?

	-----------------------
	-- Pred tree (implicit)
	PredTerm ::
		pred: Atom		-- predicate structure
		val: [bool];	-- given current bindings? or unknown? actual pred value

	EqTerm ::
		lhs: Expr
		rhs: Expr; -- equality is special?

	Pred = PredTerm | EqTerm;

	Term = Expr | Pred;
	  
values 

  bdVDMId: BdId = mk_token("bdVDM");
  bdH0Id : BdId = mk_token("bdH0");
  
  sigma : Sigma =
  					mk_Sigma(
  						{ bdVDMId |-> bdVDM, bdH0Id |-> bdH0 }, -- bdm
  						{ bdH0Id |-> {mk_(bdVDMId, <Inherits>)},
  							bdVDMId |-> {} }										  -- bdrels
  				);
  
  bdVDM: Body = 
  					mk_Body(
	  					--{}, 			-- uses
	  					<Library>,	-- domain
	  					{ |-> },		-- functions		
	  					{  },	    	-- types
	  					{ |-> },		-- results
	  					{ |-> }			-- strats
	  				);
						  				
	bdH0 : Body = 
						mk_Body(
	  					--{bdVDMId},					
	  					<DataStructures>,	
	  					-- NOTE: here you see what I mean about token types beind annoying 
	  					--			 in Overture! You could change mk_XXId to mk_token all the same!
	  					{ mk_token("locs-of") |-> 
	  						mk_FnDefn(
	  							mk_token("Loc => nat => Loc set"),
	  							{},
	  							mk_token("...")
	  							-- mk_FnDefn could be another (separate value) if needed
	  						),
	  						
	  						mk_token("is-block") |->
	  						mk_FnDefn(
	  							mk_token("Loc => nat => Loc set => bool"),
	  							{},
	  							nil
	  						)
	  					},			
	  					{  },		
	  					{ |-> },		
	  					{ |-> }			
	  				);
functions 
-- define here auxiliary (side-effect-free) functions	

state StateName of
-- define here global state + invariant
end 

operations 
-- define here state-rich (imperative) procedures

end MWhy1