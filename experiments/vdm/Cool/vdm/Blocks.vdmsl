module Blocks
exports all
definitions 

types 

-- C.0 Auxiliary types 

Id = token;

Type = ScalarType | ProcType;

ScalarType = <IntTp> | <BoolTp>;

ProcType :: ptps: seq of ScalarType;

Env = map Id to Den;

Den = ScalarLoc | ProcDen;

ScalarLoc = token;

ProcDen :: 	ps: seq of Id
		   	body: Stmt
			context: Env;


Sigma = map ScalarLoc to ScalarValue;
	
ScalarValue = int | bool ;

ValueMap = map Id to ScalarValue;

TypeMap = map Id to Type;

Program :: vars : TypeMap
		   body : Stmts;

Stmts = seq of Stmt;

Stmt = token; -- Assign | If | While;


end Blocks