module ParAssign
imports from IO operations println; print
exports all
definitions 

types

Id = token;

ScalarType = <IntTp> | <BoolTp>;
ScalarValue = int | bool;

Type = Id | ScalarType ;

TypeMap = map Id to ScalarType;

ValueMap = map Id to ScalarValue;

Expr = ArithExpr | Id | ScalarValue;

ArithExpr :: opd1 	: Expr
			 oprator: <PLUS> | <MINUS> | <TIMES>
			 opd2	: Expr
			 ;

Assign :: 	lhs : Id
			rhs : Expr;

Program ::  vars: TypeMap
			left: seq of Assign
			right: seq of Assign

functions

----------------------------------------------------------------------------
---------------------------- CONTEXT CONDITIONS ----------------------------
----------------------------------------------------------------------------

wf_Program: Program -> bool
wf_Program(mk_Program(tpm, lhs, rhs)) ==
	(forall i in set inds lhs & wf_Assign(lhs(i), tpm)) 
	and
	(forall j in set inds rhs & wf_Assign(rhs(j), tpm))
	--and len lhs = len rhs?
	;

wf_Assign: Assign * TypeMap -> bool
wf_Assign(mk_Assign(lhs, rhs), tpm) ==
	lhs in set dom tpm and 
	c_tp(rhs, tpm) = tpm(lhs);

c_tp: Expr * TypeMap -> (ScalarType | <Error>)
c_tp(e, tpm) ==
	cases true:
		(is_ArithExpr(e))	-> c_tp_AExpr(e, tpm),
		(is_Id(e))			-> c_tp_Id(e, tpm),
		(is_ScalarValue(e)) -> c_tp_ScalarValue(e),
		others				-> <Error>
	end;
 
c_tp_AExpr: ArithExpr * TypeMap -> (ScalarType | <Error>)
c_tp_AExpr(mk_ArithExpr(op1, -, op2), tpm) ==
	if (c_tp(op1, tpm) = <IntTp> and c_tp(op2, tpm) = <IntTp>)
	then <IntTp>
	else <Error>;

c_tp_Id: Id * TypeMap -> (ScalarType | <Error>)
c_tp_Id(id, tpm) ==
	if (id in set dom tpm)
	then tpm(id)
	else <Error>;

c_tp_ScalarValue: ScalarValue -> (ScalarType | <Error>)
c_tp_ScalarValue(v) ==
	cases true:
		(is_int(v))		-> <IntTp>,
		(is_bool(v)) 	-> <BoolTp>,
		others			-> <Error>
	end;

------------------------------------------------------------------------
---------------------------- SEMANTIC RULES ----------------------------
------------------------------------------------------------------------

--	--p--> : relation over before/after program/state
--			 set ( (Program x Sigma) x (Program x Sigma) )
--
--	sem_prog(Program x Sigma, Program x Sigma) --> bool  				[--p-->]
--
--  e.g. (P, sigma) --p--> (P', sigma') = (P, sigma, P', sigma') in (_ --p--> _) == sem_prog(P, sigma, P, sigma') = true
--
--  just like in: "x < y" == (x, y) in (_ < _) == less_than(x, y) = true
--

sem_programL: Program * ValueMap * Program * ValueMap -> bool
sem_programL(pB, sB, pA, sA) ==
	let mk_Program(tpmB, [a] ^ lhsB, rhsB) = pB,
		mk_Program(tpmA, lhsA, rhsA) = pA
	in
		tpmB = tpmA and lhsB = lhsA and rhsB = rhsA and
		sA = exec_assign(a, sB);

sem_programR: Program * ValueMap * Program * ValueMap -> bool
sem_programR(pB, sB, pA, sA) ==
	let mk_Program(tpmB, lhsB, [a] ^ rhsB) = pB,
		mk_Program(tpmA, lhsA, rhsA) = pA
	in
		tpmB = tpmA and lhsB = lhsA and rhsB = rhsA and
		sA = exec_assign(a, sB);

sem_program0: Program * ValueMap * Program * ValueMap -> bool
sem_program0(pB, sB, pA, sA) ==
	let mk_Program(tpmB, [], []) = pB,
		mk_Program(tpmA, [], []) = pA
	in
		tpmB = tpmA and sA = sB;

-- SERIOUS TODO: 
--		 this doesn't quite work because the "or"-ing doesn't stop when false (e.g. needs guards)
--		 but rather fails to pattern match (e.g. in sem_program0). Also the state "updates" do not
--		 get accumulated accross appropriately (e.g. we need something akin to a state-monad?).
sem_program: Program * ValueMap * Program * ValueMap -> bool
sem_program(pB, sB, pA, sA) ==
	sem_programL(pB, sB, pA, sA) or
	sem_programR(pB, sB, pA, sA) or
	sem_program0(pB, sB, pA, sA);
	
compile_program: Program -> ValueMap
compile_program(mk_Program(vars, lhs, rhs)) ==
	initial_Sigma(vars)
pre
	wf_Program(mk_Program(vars, lhs, rhs));

interpret_program: Program * ValueMap * set of ValueMap -> bool
interpret_program(p, sigma_zero, sigmas_expected) ==
	forall sigma_e in set sigmas_expected &
		sem_program(p, sigma_zero, mk_Program(p.vars, [], []), sigma_e);

exec_program: Program * ValueMap-> set of ValueMap
exec_program(mk_Program(vars, lhs, rhs), sigma_zero) ==
		--{ sigma_dash | sigma_dash in set { i |-> 0 | i in set dom vars } & 
		--{ sigma_dash | sigma_dash in set all_sigmas(vars) & 
		{ sigma_dash | sigma_dash : ValueMap & 
			dom sigma_dash = dom vars 
			and
			sem_program(mk_Program(vars, lhs, rhs), 
						sigma_zero,
						mk_Program(vars, [], []),
						sigma_dash) };

-- determinisitc / atomic assigments only for now
exec_assign: Assign * ValueMap -> ValueMap
exec_assign(mk_Assign(lhs, rhs), sigma) ==
	let v= eval_expr(rhs, sigma) in
		sigma ++ { lhs |-> v };

eval_expr: Expr * ValueMap -> ScalarValue
eval_expr(e, sigma) ==
	cases true:
		(is_ArithExpr(e))	-> eval_AExpr(e, sigma),
		(is_Id(e))			-> lookup_Id(e, sigma),
		(is_ScalarValue(e)) -> e
	end; 

eval_AExpr: ArithExpr * ValueMap -> int
eval_AExpr(mk_ArithExpr(op1, opt, op2), sigma) ==
	let v1 = eval_expr(op1, sigma) in
		let v2 = eval_expr(op2, sigma) in
			cases opt:
				<PLUS>	-> (v1 + v2),
				<MINUS> -> (v1 - v2),
				<TIMES> -> (v1 * v2)
			end;

lookup_Id: Id * ValueMap -> ScalarValue
lookup_Id(id, sigma) ==
	sigma(id)
pre
	id in set dom sigma;

/* Initial sigma is given by default values to each scalar type*/
initial_Sigma: TypeMap -> ValueMap
initial_Sigma(tpm) ==
	{ id |-> 0 | id in set dom tpm & tpm(id) = <IntTp> };

all_sigmas: TypeMap -> ValueMap
all_sigmas(tpm) ==
	{ id |-> v | id in set dom tpm, v in set SCALAR };

values
	x_id: Id = mk_token("x");

	SCALAR : set of ScalarValue = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };

	-- (x <- x*2; x <- x*4) || (x <- x*3; x <- x*5)
	PROGRAM1: Program = mk_Program({ x_id |-> <IntTp> }, 
					[mk_Assign(x_id, mk_ArithExpr(x_id, <TIMES>, 2)), 
					 mk_Assign(x_id, mk_ArithExpr(x_id, <TIMES>, 4))], 
					[mk_Assign(x_id, mk_ArithExpr(x_id, <TIMES>, 1)), 
					 mk_Assign(x_id, mk_ArithExpr(x_id, <TIMES>, 3))]);

	-- (x <- 1; x <- x*2; x <- x*4) || (x <- 1; x <- x*3; x <- x*5)
	PROGRAM2: Program = mk_Program({ x_id |-> <IntTp> }, 
					[mk_Assign(x_id, 1),
					 mk_Assign(x_id, mk_ArithExpr(x_id, <TIMES>, 2)),
					 mk_Assign(x_id, mk_ArithExpr(x_id, <TIMES>, 4))], 
					[mk_Assign(x_id, 1),
					 mk_Assign(x_id, mk_ArithExpr(x_id, <TIMES>, 1)), 
					 mk_Assign(x_id, mk_ArithExpr(x_id, <TIMES>, 3))]);

	SIGMA_EXPECTED_PROG : set of ValueMap = { { x_id |-> 0 } };

	SIGMA_EXPECTED_PROG2 : set of ValueMap = { { x_id |-> 4 }, -- all LHS
											   { x_id |-> 15 }--, -- all RHS 
												--{ x_id |->  }, 
											 };

operations

WF : Program ==> bool
WF(p) ==
	(
		IO`println("\n\n 2) Test program is well-formed\n");
		IO`println  ("\t------------ STARTED(2)  ------------");
			(dcl 
				resultP3 : bool := wf_Program(p); -- and (p.start_meth = meth);
				IO`println("\n\t------------ FINISHED(2) ------------\n");
				return (resultP3);
			);
	);

Compile : Program ==> ValueMap
Compile(p) ==
	(
		IO`println("\n\n 3) Compiling program initial state map \n");
		IO`println  ("\n------------ PROGRAM(3)  ------------");	
		IO`println(p);
		IO`println  ("\n------------ STARTED(3)  ------------");	
		(dcl
			sigma: ValueMap := compile_program(p);
			IO`println("\n--------- INITIAL STATE -----------");	
			IO`println(sigma);
			IO`println("\n------------ FINISHED(3) ------------\n");
			return sigma;
		);
	);

TestExec : Program ==> ()
TestExec(p) ==
	(
		IO`println("\n\n 1) Test semantic execution functions\n");
		IO`println  ("\n------------ STARTED(1)  ------------");
			if WF(p) then
				(dcl 
					sigma: ValueMap := Compile(p),
					sigmaR: set of ValueMap := exec_program(p, sigma);
					IO`println("\n-------- RESULT SIGMA(s) ----------");	
					IO`println(sigmaR);
				)
			else
				IO`println("!!! program is not well-formed !!!");
		IO`println("\n------------ FINISHED(1) ------------\n");
	);

QueryExec : Program * set of ValueMap ==> ()
QueryExec(p, expected_results) ==
	(
		IO`println("\n\n 1) Test semantic execution functions\n");
		IO`println  ("\n------------ STARTED(1)  ------------");
			if WF(p) then
				(dcl 
					sigma: ValueMap := Compile(p),
					result: bool := interpret_program(p, sigma, expected_results);
					IO`println("\n-------- RESULT SIGMA(s) ----------");	
					IO`println(result);
				)
			else
				IO`println("!!! program is not well-formed !!!");
		IO`println("\n------------ FINISHED(1) ------------\n");
	);

end ParAssign