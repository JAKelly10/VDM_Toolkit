------------------------------------------------------------------------------------
--@header 
--@doc Copyright, Leo Freitas 2020 
--@v1, 15/11/2020
------------------------------------------------------------------------------------
module FolderolAlt
imports from VDMUtil functions val2seq_of_char renamed val2str;
exports all
definitions 

------------------------------------------------------------------------------------
--@chapter VDM implementation of Lary's Folderol theorem prover as defined in
--				 https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-192.pdf
------------------------------------------------------------------------------------

types
	string = seq of char;
	string1= seq1 of char;

--@doc terms	
	Var ::
		x: string;
		
	Param ::
		f: string
		p: seq of string;
		
	Bound ::
		n: nat;
		
	Fun ::
		f: string
		ts: seq of Term;
		
	Term = Var | Param | Bound | Fun;

--@doc formulae
	Pred ::
		p: string
		ts: seq of Term;
		
	Conn ::
		c: string
		fs: seq1 of Form
	inv mk_Conn(-, f) == len f <= 2;
		
	Quant ::
		q: string
		v: string
		f: Form;
	
	Form = Pred | Conn | Quant;
	
	Key :: k: string;
	Id  :: i: string;
	Token = Key | Id;
	
	Collation = string
	inv c == card elems c = len c;		-- No duplicates in a collation sequence

values
	codeChars: Collation = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";
	
functions

------------------------------------------------------------
--@section basic definitions	
------------------------------------------------------------
	length[@T]: seq of @T -> nat
	length(s) == len s;
	
	filter[@T]: (@T -> bool) * seq of @T -> seq of @T
	filter(p, s) == [ s(i) | i in set inds s & p(s(i)) ]
	post
		len RESULT <= len s
		and
		elems RESULT subset elems s
		and
		forall i in seq RESULT & p(i);
	
	mem[@T]: @T * seq of @T -> bool
	mem(x, s) == x in set elems s;
	
	ins[@T]: @T * seq of @T -> seq of @T
	ins(x, s) == if mem[@T](x, s) then s else [x]^s
	post
		(if mem[@T](x, s) then len RESULT = len s else len RESULT > len s)
		and
		mem[@T](x, RESULT);
	
	repeat[@T]: @T * nat -> seq of @T
	repeat(x, n) == [ x | - in set {1,...,n} ]
	post
		(elems RESULT = {x} and len RESULT = n);	
	
	accumulate[@X, @Y]: (@X * @Y -> @Y) * seq of @X * @Y -> @Y 
	accumulate(f, s, y) ==
		cases s:
			[] 		 -> y,
			[x]^xs -> accumulate[@X, @Y](f, xs, f(x, y))
		end
	measure
		len s;
		
	lookup[@X, @Z]: @X * seq of (@X * @Z) -> seq of @Z
	lookup(x, env) ==
		cases env:
			[] 						-> [],
			[mk_(y,z)]^xs -> if x = y then [z] else lookup[@X,@Z](x, xs)
		end
	measure
		len env;

	seqMap[@T,@R]: (@T->@R) -> seq of @T -> seq of @R
  seqMap(f)(s) == [ f(s(i)) | i in set inds s ]
  --@todo @NB: how go express this one? POG?
  --pre elems s subset dom f
  --pre forall i in set inds s & pre_f(s(i)) --?  
  post len RESULT = len s;
  
  implode: seq of string -> string
  implode(ss) == conc ss;
  
------------------------------------------------------------
--@section operations on terms and formulae
------------------------------------------------------------

	--@doc replace atomic term u by new throughout a term t
	replace_term: Term * Term -> Term -> Term
	replace_term(u, new)(t) ==
		if t = u then 
			new
		else if is_Fun(t) then
			let mk_Fun(a, ts) = t in
				mk_Fun(a, seqMap[Term, Term](replace_term(u,new))(ts))
		else
			t;

	--@doc abstraction of a formula over t (containing no bound vars)
	--@Warning(5012) no measure
	abst: Term * nat -> Form -> Form
	abst(t, i)(f) ==
		cases true:
			(is_Pred(f)) -> let mk_Pred(a, ts)    = f in mk_Pred(a, seqMap[Term, Term](replace_term(t, mk_Bound(i)))(ts)),
			(is_Conn(f)) -> let mk_Conn(b, As)    = f in mk_Conn(b, seqMap[Form, Form](abst(t, i))(As)),
			(is_Quant(f))-> let mk_Quant(q, b, A) = f in mk_Quant(q, b, abst(t, i+1)(A))
		end;
		
	abstract: Term -> Form -> Form
	abstract(t) == abst(t, 0);
	
	--depth: Form -> nat1
	--depth(f) ==
	--	cases true:
	--		(is_Pred(f)) -> 1,
	--		(is_Conn(f)) -> let mk_Conn(b, As)    = f in 1 + depth(As),
	--		(is_Quant(f))-> let mk_Quant(q, b, A) = f in 1 + depth(A)
	--	end;
	--@Warning(5012) no measure
	subst: Term * nat -> Form -> Form
	subst(t, i)(f) ==
		cases true:
			(is_Pred(f)) -> let mk_Pred(a, ts)    = f in mk_Pred(a, seqMap[Term, Term](replace_term(mk_Bound(i), t))(ts)),
			(is_Conn(f)) -> let mk_Conn(b, As)    = f in mk_Conn(b, seqMap[Form, Form](subst(t, i))(As)),
			(is_Quant(f))-> let mk_Quant(q, b, A) = f in mk_Quant(q, b, subst(t, i+1)(A))
		end
	--measure is structural depth of Term/Form being finite?
	;
			
	subst_bound: Term -> Form -> Form
	subst_bound(t) == subst(t, 0);	
	
------------------------------------------------------------
--@section syntax: scanning, parsing and displaying	
------------------------------------------------------------

	valofCh: char * Collation -> nat1
	valofCh(c, collation) == iota i in set inds collation & collation(i) = c
	pre c in set elems collation;

	lessCh: char * char -> bool
	lessCh(a, b) == valofCh(a, codeChars) < valofCh(b, codeChars);
	
	--@doc see letter or digit and ML's ord operator on strings
	ml_ord_chr: string -> char
	ml_ord_chr(s) == s(1)
	pre
		--@OnFail("Invalid empty character string %1s", s)
		(len s > 0);
	
	val_is_char: string * string * string -> bool
	val_is_char(l_,c_,u_) == 
		let l: char = ml_ord_chr(l_),
				c: char = ml_ord_chr(c_),
				u: char = ml_ord_chr(u_)
		 in
			  (l=c or lessCh(l, c)) and (c=u or lessCh(c, u));--c in set {l,...,u}
	
	--@doc defined in terms of string to make it easer on scanning
	letter_or_digit: string -> bool
	letter_or_digit(c) == val_is_char("A",c,"Z") or val_is_char("a",c,"z") or val_is_char("0",c,"9");
	 		
	blanks: string -> bool
	blanks(c) == c in set {" ", "\t", "\n"};
	
	keyword_infix: string -> bool
	keyword_infix(c) == c in set {"-->", "<->"};
	
	keyword_quant: string -> bool
	keyword_quant(c) == c in set {"ALL", "EXISTS"};
	 		
	token_of: string -> Token
	token_of(a) == 
		if mem[string](a, ["ALL", "EXIST"]) then mk_Key(a) else mk_Id(a);
	
	scan_ident: seq of string * seq of string -> Token * seq of string
	scan_ident(front, next) == 
		cases next:
			[]     -> mk_(token_of(implode(reverse front)), []),
			[c]^cs -> if letter_or_digit(c) then
									scan_ident([c]^front, cs)
								else
									mk_(token_of(implode(reverse front)), [c]^cs)
		end
	measure
		len next;
	
	--@doc ML nifty trick on mutually recurisve definitions, here as defined earlier
	--@Warning(5013) no cycle
	scan_next: seq of Token * (Token * seq of string) -> seq of Token
	scan_next(front_toks, mk_(tok, cs)) == scan([tok]^front_toks, cs);
	
	--@doc Scanning, recognizing --> and <->, skipping blanks, etc.
	--		 Have to account for ML's use in no differentiation between " " and ' '!
	--@Warning(5012,5013) no measure no cycle 
	scan: seq of Token * seq of string -> seq of Token
	scan(front_toks, next) ==
		cases next:
			[] 			-> reverse front_toks, --end of char list
			[c]^cs  -> if blanks(c) then 
										scan(front_toks, cs) --blanks tabs, newlines
									else if keyword_infix(c) then
										scan([mk_Key(c)]^front_toks, cs) --infix operators --> and <->
									else if letter_or_digit(c) then
										scan_next(front_toks, scan_ident([c], cs))
									else
										scan([mk_Key(c)]^front_toks, cs) --arguably could be together with infix ops?
		end
	--measure len next + (letter_or_digit(c) => ?)
	;

	--@doc parsing a list of tokens
	apfst[@A,@B,@C]: (@A -> @B) -> (@A * @C) -> (@B * @C) 
	apfst(f)(mk_(x, toks)) == mk_(f(x), toks); 

------------------------------------------------------------
--@subsection functions for constructing results
------------------------------------------------------------

	cons[@X]: @X -> seq of @X -> seq of @X
	cons(x)(xs) == [x]^xs;
	
	makeVar: string -> Var
	makeVar(a) == mk_Var(a);
		
	makeFun: string -> seq of Term -> Fun
	makeFun(fu)(ts) == mk_Fun(fu, ts);
	
	makePred: string -> seq of Term -> Pred
	makePred(id)(ts) == mk_Pred(id, ts);
	
	makeNeg: Form -> Conn
	makeNeg(A) == mk_Conn("~", [A]);
	
	makeConn: string -> Form -> Form -> Conn
	makeConn(a)(A)(B) == mk_Conn(a, [A,B]);
		
	makeQuant: string -> string -> Form -> Quant
	makeQuant(q)(b)(A) == mk_Quant(q, b, abstract(mk_Fun(b,[]))(A))
	pre
		keyword_quant(q); 	

------------------------------------------------------------
--@subsection repeated parsing returning the list of results
------------------------------------------------------------
	
	--@doc parse "a<phrase>...a<phrase>"
	--@Warning(5013)
	parse_repeat[@T]: string * (seq of Token -> @T * seq of Token) -> seq of Token -> (seq of @T * seq of Token)
	parse_repeat(a, parsefn)(tokens) == 
		cases tokens:
			[mk_Key(b)]^toks -> if a = b then parse_repeat1[@T](a, parsefn)(toks) else mk_([], [mk_Key(b)]^toks),
			others					 -> mk_([], tokens)
		end;
	
	--@doc parse "<phrase>a...<phrase>a"
	--@Warning(5013)
	parse_repeat1[@T]: string * (seq of Token -> @T * seq of Token) -> seq of Token -> (seq of @T * seq of Token)
  parse_repeat1(a, parsefn)(toks) == 
  	let mk_(u, toks2) = parsefn(toks),
  			mk_(t, toks3) = parse_repeat[@T](a, parsefn)(toks2)
  	 in
  	 	--@Warning(5031) @T expected to be token
  		apfst[@T, seq of @T, seq of Token](cons[@T](u))(mk_(t, toks3));
	 
	right_paren[@T]: (@T * seq of Token) -> (@T * seq of Token)
	right_paren(mk_(x, tokens)) == mk_(x, tl tokens)
	pre
		--@OnFail("Symbol ')' expected %1s found", if tokens = [] then nil else hd tokens)
		(tokens <> [] and hd tokens = mk_Key(")"));

	syntax_of_term: seq of Token -> bool
	syntax_of_term(tokens) ==	 
		tokens <> [] 
		and
		--@doc f(...)
		((len tokens > 1 and is_Id(hd tokens) and is_Key(tokens(2)) and tokens(2).k="(")
		 or
		--@doc ?v
		 (len tokens > 1 and is_Key(hd tokens) and (hd tokens).k="?" and is_Id(tokens(2)))
		 or
		--@doc f
		 (is_Id(hd tokens))
		);
		
	parse_term: seq of Token -> Term * seq of Token
	parse_term(tokens) ==
		cases tokens:
			[mk_Id(a), mk_Key("(")]^toks -> 
				--@doc here we see the power of ML's type inference in practice! The type of apfst was originally wrongly typed!
				--let x: seq of Term * seq of Token = parse_repeat1[Term](",", parse_term)(toks),
		    --		y: seq of Term * seq of Token = right_paren[seq of Term](x) 
		    -- in
				--	apfst[seq of Term, Fun, seq of Token](makeFun(a))(y),
					--apfst[@A,@B,@C]: (@A -> @B) -> (@A * @C) -> (@B * @C) 
					--apfst(f)(mk_(x, toks)) == mk_(f(x), toks); 
					--apfst[seq of Term, Term, seq of Token] 
					--	(makeFun(a)) 							--:: (seq of Term -> Fun)
					--	(rightparen[seq of Term] 
					--			(parse_repeat1[Term] 
					--					(",", parse_term) --:: string * (seq of Token -> Term * seq of Token)
					--					toks							--:: seq of Token
					--			)											--:: (seq of Term * seq of Token)
					--	)													--:: (seq of Term * seq of Token)
				apfst[seq of Term, Fun, seq of Token](makeFun(a))(right_paren[seq of Term](parse_repeat1[Term](",", parse_term)(toks))),
			[mk_Id(a)]^toks 						 -> mk_(mk_Fun(a, []), toks),
			[mk_Key("?"), mk_Id(a)]^toks -> mk_(mk_Var(a), toks)
		end
	pre
		--@OnFail("Syntax of term")
		(syntax_of_term(tokens));
	
	--@doc precedence table
	prec_of: string -> int
	prec_of(s) ==
		if  s="~" then 4 else 
		if  s="&" then 3 else
		if  s="|" then 2 else
		if  s="<->" then 1 else
		if  s="-->" then 1 else -1; 
	
	syntax_of_form: seq of Token -> bool
	syntax_of_form(tokens) ==
		tokens <> []
		and
		(--@doc ~A or (A
		 (is_Key(hd tokens) and ((hd tokens).k in set {"~", "("}))
		 or
		 --@doc A(
		 (len tokens > 1 and is_Id(hd tokens) and is_Key(tokens(2)) and tokens(2).k="(")
		 or
		 --@doc A
		 is_Id(hd tokens)
		);
		
	parse_atom: seq of Token -> Form * seq of Token
	parse_atom(tokens) == 
		cases tokens:
			[mk_Key("~")]^toks 						-> 
				apfst[Form, Conn, seq of Token](makeNeg)(parse_atom(toks)),
			[mk_Key("(")]^toks 						-> 
				right_paren[Form](parse(toks)),
			[mk_Id(pr), mk_Key("(")]^toks -> 
				apfst[seq of Term, Pred, seq of Token](makePred(pr))(right_paren[seq of Term](parse_repeat1[Term](",", parse_term)(toks))),
			[mk_Id(pr)]^toks -> mk_(mk_Pred(pr, []), toks)
		end
	pre
		--@OnFail("Syntax of formula")
		(syntax_of_form(tokens))
	measure 
		len tokens
	;

	parsefix: int -> Form * seq of Token -> Form * seq of Token
	parsefix(prec)(A, tokens) == 
		cases tokens:
			[mk_Key(co)]^toks ->
				if prec_of(co) < prec then 
					mk_(A, tokens)
				else
					--@doc here VDM let us down on not identifying the (Form * seq of Term) result
					let mk_(form, toks_) = parse_atom(toks),
					    mk_(form', toks')= apfst[Form, Conn, seq of Token](makeConn(co)(A))(parsefix(prec_of(co))(form, toks_))
					 in
						parsefix(prec)(form', toks'),
			others -> mk_(A, tokens)
		end
	measure
		len tokens;
		
	parse: seq of Token -> Form * seq of Token
	parse(tokens) ==
		cases tokens:
			[mk_Key("ALL"), mk_Id(a), mk_Key(".")]^toks     ->
				 apfst[Form, Quant, seq of Token](makeQuant("ALL")(a))(parse(toks)),
			[mk_Key("EXISTS"), mk_Id(a), mk_Key(".")]^toks  ->
				 apfst[Form, Quant, seq of Token](makeQuant("EXISTS")(a))(parse(toks)),
			others -> 
				let mk_(form, toks_) = parse_atom(tokens) in
					parsefix(0)(form, toks_)
		end
	measure 
		len tokens
	;
	
------------------------------------------------------------
--@subsection Printing: conversion of terms/formulae to strings
------------------------------------------------------------

	enclose: string -> string
	enclose(s) == "(" ^ s ^ ")";
	
	conc_list: string -> seq of string -> string
	conc_list(sep)(s) == 
		cases s:
			[] 		 -> "",
			[b]^bs -> (sep ^ b) ^ conc_list(sep)(bs)
		end
	measure
		len s;
		
	conc_list1: string -> seq of string -> string
	conc_list1(sep)(s) == hd s ^ conc_list(sep)(tl s)
	pre
		--@OnFail("Invalid empty string")
		(len s > 0);

	stringof_args: seq of Term -> string
	stringof_args(ts) == 
		if ts = [] then "" else enclose(conc_list1(",")(seqMap[Term, string](stringof_term)(ts)));
				
	stringof_term: Term -> string
	stringof_term(t) == 
		cases true:
			(is_Param(t)) -> let mk_Param(a, -) = t	in a,
			(is_Var(t))   -> let mk_Var(a)      = t in "?" ^ a,
			(is_Bound(t)) -> let mk_Bound(i)    = t in "B." ^ val2str[int](i),
			(is_Fun(t))   -> let mk_Fun(a, ts)  = t in a ^ stringof_args(ts)
		end;
		
	max: int * int -> int
	max(x,y) == if x > y then x else y;

	--@Warning(5012)
	stringof_form: int -> Form -> string
	stringof_form(prec)(t) == 
		cases true:
			(is_Pred(t))  -> let mk_Pred(a, ts)    = t in a ^ stringof_args(ts),
			(is_Conn(t))  -> let mk_Conn(C, ops)   = t in
				 (if C = "~" and len ops = 1 then 
				 		"~" ^ stringof_form(prec_of("~"))(hd ops)
				 else
				 		(let
				 			A: Form = ops(1), B: Form = ops(2), 
				 			stringf: (Form -> string) = stringof_form(max(prec_of(C), prec)),
				 			Z: string = stringf(A) ^ " " ^ C ^ stringf(B)
				 		 in
				 		  if prec_of(C) <= prec then 
				 		  	enclose(Z)
				 		  else
				 		  	Z
				 		)
				 ),
			(is_Quant(t)) -> let mk_Quant(q, b, A) = t in 
				 (let 
				 		B: Form   = subst_bound (mk_Fun(b, []))(A),
				 		Z: string = q ^ " " ^ b ^ ". " ^ stringof_form(0)(B)
				 	 in
				 	  if prec > 0 then enclose(Z) else Z
				 )
		end;
	
	stringof: Form -> string
	stringof(f) == stringof_form(0)(f);
		
------------------------------------------------------------
--@section Unification
------------------------------------------------------------
types
	Env = seq of (string * Term);
	
functions
------------------------------------------------------------
--@subsection Naive unification of terms containing no bound variables
------------------------------------------------------------
	
	--@doc Chase variable assignments
	chase_var: Term * Env -> Term
	chase_var(term, env) ==
		cases true:
			(is_Var(term)) -> 
				let mk_Var(a) = term in
					cases lookup[string, Term](a, env):
						[]    -> term,
						[u]^- -> chase_var(u, env)
					end,
			others -> term
		end
	measure
		if is_Var(term) then 
			let mk_Var(a) = term in len lookup[string, Term](a, env)
		else
			0;
	
	occs: string * Term * Env -> bool
	occs(a, t, env) ==
		cases true:
			(is_Fun(t))  -> let mk_Fun(-,ts)  = t in occsl(a, ts, env),
			(is_Param(t))-> let mk_Param(-,bs)= t in occsl(a, seqMap[string, Var](makeVar)(bs), env),
			(is_Var(t))  -> let mk_Var(b)     = t in a=b or occsl(a, lookup[string, Term](b, env), env),
			others -> false
		end;
		
	occsl: string * seq of Term * Env -> bool
	occsl(a, ts, env)	==
		cases ts:
			[]      -> false,
			[t]^ts' -> occs(a, t, env) or occsl(a, ts', env)
		end;
		
	--@doc Unification with var
	unify_var: string * Term * Env -> Env
	unify_var(a, t, env) == env;

	unification_term: Term * Term -> bool
	unification_term(t, u) == 
		is_Var(t)
		or 
		is_Var(u)
		or 
		(is_Param(t) and is_Param(u) and t.f = u.f)
		or
		--@doc check on inner parameters is done via unify_terms check
		(is_Fun(t) and is_Fun(u) and t.f = u.f);
	
	unify_term: Term * Term * Env -> Env
	unify_term(t, u, env) == 
		if is_Var(t) then
			unify_var(t.x, u, env)
		else if is_Var(u) then
			unify_var(u.x, t, env)
		else if is_Param(t) and is_Param(u) then
			env
		else if is_Fun(t) and is_Fun(u) then
			unify_terms(t.ts, u.ts, env)
		else
			env
	pre
		--@OnFail("Unification of term fail %1s %2s", t, u)
		(unification_term(t, u));
	
	unification_terms: seq of Term * seq of Term -> bool
	unification_terms(ts, us) == 
		len ts = len us
		and
		(forall t in seq ts, u in seq us & unification_term(t, u));
					 	
	unify_terms: seq of Term * seq of Term * Env -> Env	
	unify_terms(ts, us, env) ==
		if ts = [] and us = [] then
			env
		else
			unify_terms(tl ts, tl us, unify_term(chase_var(hd ts, env), chase_var(hd us, env), env))
	pre
		--@OnFail("Unify")
		(unification_terms(ts, us));

	f: nat -> nat
	f(a) ==
		let g: nat * nat -> nat 
				g(x, y) == x + y pre x + a > 5 
		 in
			g(a, a);
		
end FolderolAlt