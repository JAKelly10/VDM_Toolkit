module Minimal
exports all
definitions 

values
	M: int = 10;

types 
	T1 = nat1
	inv t == t <= M;

functions 

  fI(x: T1) r: T1
  pre true
  post x < r;
  
	f: T1 -> T1
	f(x) == x + 1
	pre 
		--@exercise what's missing?!
		x < M
	post
		x < RESULT; 

	--@exercise translate g to Isabelle and prove its FSB PO
	g: T1 -> T1
	g(y) == f(y+5)
	pre
		y > 3
	post
		RESULT > 8;
		
	seq_comp[@S]: (@S -> @S) * (@S -> @S) * @S -> @S
	seq_comp(P, Q, bst) == Q(P(bst));
		-- let s' = P(bst) in Q(s');  	
	 
-- State can be viewed as a record implicitily accessible within operations 
state S of 
	t1: T1
	t2: T1
	inv mk_S(t1, t2) == t1 < t2
-- State initialisation must establish the invariant; 
-- otherweise would be like an exception at construction time. 
--	Avoid state being too restrictive: i.e. no op(x) at all is possible from it
-- init s == s = mk_S(M-1, M)
 init s == s = mk_S(1, 10)
end

operations
	
	-- Operations work over the state: 
	-- before state (t1~, t2~) and after state (t1, t2)
	-- op: T1 * S -> T1 * S
	-- op(Sbefore, t) == r, Safter
	--

	--@exercise print opE, pre_opE, post_opE in console to see signatures
	--@doc explicit (impure)
	opE: T1 ==> T1
	opE(t) == 
		(t1 := t1+t; 
		 --@exercise what if it was t2 + t1?
		 return t2 - t1; -- t1+t1; t2 - (t1+t) = t2 - t1 - t
		)
	pre
		--@exercise what's missing?
		true
	post
		t2~ = t2 
		and
		-- post condition insists that after state for t1 
		-- is strictly bigger than its before state t1~
		t1~ < t1
		and
		RESULT < t2;
	
	
	
	
	
	
	
	--@doc explicit pure
	pure
	opEP: T1 ==> T1 
	opEP(t) == 
		(return t2-(t1+t))
	pre
		--@exercise anything missing?
		true
	post
		RESULT < t2;
		
	--@exercise translate this operation and its feasibility proof to Isabelle
	--@doc extended explicit, impure (ext wr)		
	opEE(t: T1) r: T1 ==
		(t1 := t1+t;
		 return t2 - t1;
		)
	ext
		wr t1 rd t2
	pre
		--@exercise what's missing?
		true
	post
		--@exercise what's the framing condition?
		--and
		t1~ < t1 
		and 
		r < t2
		and 
		--@exercise what's the extra precaution needed in post_opEE?
		--@hint it calls opeEP
		r <= opEP(t);
	
	--@exercise define a version of the extended explicit that is implicitly pure
	--@hint just like the opEE but without a ext wr clause; see opEP definition
	--@doc extended explicit, implicitly pure (ext rd)
		opEEIP(t: T1) r: T1 ==
			(return t2-(t1+t)
			)
		ext 
			rd t1, t2
		pre
			--@exercise what's missing?
			true
		post 
			r < t2
			and
			--@exercise how would you translate operation call? is this right? 
			r <= opEP(t);
			
--@doc Proof obligation that f is feasible, f(x) == x+1
-- (forall x:Mimimal`T1 & pre_f(x) => 
--			(exists RESULT: Minimal`T1 & post_f(x, RESULT) and RESULT = x+1))

  -- = [one point rule]

-- (forall x:Mimimal`T1 & pre_f(x) => 
--			(inv_T1(x+1) and post_f(x, x+1))

  -- = [eliminate forall and expand defs]

-- inv_T1(x) and true => post_f(x, (x+1)) and inv_T1(x+1)

  -- = [def inv, pre, post]
-- x > 0 and x <= M and true => x < (x+1) and inv_T1(x+1)

	-- = [deef inv]
-- x > 0 and x <= M and true => x < (x+1) and (x+1) > 0 and (x+1) <= M

  -- = [arithmetic]		
-- x > 0 and x <= M and true => true and x >= 0 and x < M

  -- = [logic]	
-- (x > 0 and x <= M => x >= 0)
-- and 
-- (x > 0 and x <= M => x < M)

  -- = [arithmetic]
-- true
-- and 
-- (x > 0 and x <= M => x < M)

  -- = [logic]
-- (x > 0 and x <= M => x < M)

  -- = [arithmetic]
-- (x > 0 and (x < M or x = M) => x < M)  -- remember: A or B => C,  (A => C) and (B => C)

  -- = [logic]
-- (x > 0 and x < M => x < M)
-- and
-- (x > 0 and x = M => x < M) 

  -- = [logic]
-- true
-- and
-- (x > 0 and x = M => x < M) 

  -- = [substitution x]
-- (x > 0 and x = M => *M < M*) -- FALSE!
--
-- WITH NEW PRE:
-- x > 0 and x <= M and x < M => x < (x+1) and inv_T1(x+1)
-- =
-- x > 0 and x < M => x < (x+1) and (x+1) > 0 and (x+1) <= M
-- =		
-- x > 0 and x < M => true and x >= 0 and x < M
-- =		
-- x > 0 and x < M => x >= 0 and x < M
-- =
-- (x > 0 and x < M => x >= 0)
-- and 
-- (x > 0 and x < M => x < M)
-- =
-- true
-- and 
-- (x > 0 and x < M => x < M)
-- =
-- (x > 0 and x < M => x < M)
-- =
-- true








	--
	--@doc Firgure out through PO for opEP:	
	--
	-- forall t: T1, bst: S & 
	--		pre_opEP(bst, t) 
	--		=> 
	--		exists ast: S, r: T1 & 
	--			mk_(ast,r) = opEP(t) 
	--			and
	--			post_opEP(bst, ast, t, r) 
	--
	  -- = [expand pre/post def + VDM implicit inv checks]
	--
	-- forall t: T1, bst: S & 
	--		inv_S(bst) and inv_T1(t) and true
	--		=>
	--		exists ast: S, r: T1 &
	--			inv_S(ast) and inv_T1(r) and
	--			mk_(ast',r') = opEP(bst, t) and ast' = ast and r' = r
	--			and 
	--			frame_opEP(bst, ast, t)
	--			and
	--			r < ast.t2
	--
	  -- = [forall intro, exists one-point rule intro, expand opEP spec]
	--
	-- inv_S(bst) and inv_T1(t)
	-- =>
	-- inv_S(ast) and inv_T1(r) 
	-- and
	-- r = bst.t2 - (bst.t1 + t)
	-- and
	-- ast.t1 = bst.t1 and ast.t2 = bst.t2
	-- and
	-- r < ast.t2
	--
	  -- = [def of inv_S, inv_T]
	-- 
	-- bst.t1 > 0 and bst.t1 < M and bst.t2 > 0 and bst.t2 < M 
	-- and
	-- bst.t1 < bst.t2 
	-- and 
	-- t > 0 and t < M 
	-- =>
	-- ast.t1 > 0 and ast.t1 < M and ast.t2 > 0 and ast.t2 < M 
	-- and
	-- ast.t1 < ast.t2 
	-- and 
	-- r > 0 and r < M 
	-- and
	-- r = bst.t2 - (bst.t1 + t)
	-- and
	-- ast.t1 = bst.t1 and ast.t2 = bst.t2
	-- and
	-- r < ast.t2
	--
	  -- = [substitution of ast.t1, ast.t2, r, normalisation of > as <]
	-- 
	-- 0 < bst.t1 and bst.t1 < M and 0 < bst.t2 and bst.t2 < M 
	-- and
	-- bst.t1 < bst.t2 
	-- and 
	-- 0 < t and t < M 
	-- =>
	-- 0 < bst.t1 and bst.t1 < M and 0 < bst.t2 and bst.t2 < M 
	-- and
	-- bst.t1 < bst.t2 
	-- and 
	-- 0 < bst.t2 - (bst.t1 + t) and bst.t2 - (bst.t1 + t) < M 
	-- and
	-- bst.t2 - (bst.t1 + t) < bst.t2
	--  	
	  -- = [simplification]
	-- 
	-- 0 < bst.t1 and bst.t1 < M and 0 < bst.t2 and bst.t2 < M 
	-- and
	-- bst.t1 < bst.t2 
	-- and 
	-- 0 < t and t < M 
	-- =>
	-- 0 < bst.t2 - (bst.t1 + t) and bst.t2 - (bst.t1 + t) < M 
	-- and
	-- bst.t2 - (bst.t1 + t) < bst.t2
	--
	  -- = [normalisation of < and -]
	-- 
	-- 0 < bst.t1 and bst.t1 < M and 0 < bst.t2 and bst.t2 < M 
	-- and
	-- bst.t1 < bst.t2 
	-- and 
	-- 0 < t and t < M 
	-- =>
	-- (bst.t1 + t) < bst.t2 
	-- and 
	-- bst.t2 < M + (bst.t1 + t)
	-- and
	-- bst.t2 < bst.t2 + (bst.t1 + t) 
	--
	  -- = [arithmetic: x < x + y, 0 < y; x < M then x < M + y]
	-- 
	-- 0 < bst.t1 and bst.t1 < M and 0 < bst.t2 and bst.t2 < M 
	-- and
	-- bst.t1 < bst.t2 
	-- and 
	-- 0 < t and t < M 
	-- =>
	-- (bst.t1 + t) < bst.t2  
	--
	  --FALSE: mk_S(5, 7), t=5
	
	--@doc Firgure out through PO: opEE	
	--
	-- forall t: T1, bst: S & 
	--		pre_opEE(bst, t) 
	--		=> 
	--		exists ast: S, r: T1 & 
	--			mk_(ast,r) = opEE(t) 
	--			and
	--			post_opEE(bst, ast, t, r) 
	--
	  -- = [expand pre/post def + VDM implicit inv checks]
	--
	-- forall t: T1, bst: S & 
	--		inv_S(bst) and inv_T1(t) and true
	--		=>
	--		exists ast: S, r: T1 &
	--			inv_S(ast) and inv_T1(r) and
	--			mk_(ast',r') = opEE(bst, t) and ast' = ast and r' = r
	--			and 
	--			frame_opEE(bst, ast, t)
	--			and 
	--    	bst.t1 < ast.t1
	--			and
	--			r < ast.t2
	--			and
	--		  pre_opEP(bst, t) and post_opEP(bst, ast, t)
	--			and
	--			r < opEP(bst, t)
	--
	  -- = [forall intro, exists one-point rule intro, expand opEP spec, opEE frame]
	--
	-- inv_S(bst) and inv_T1(t) and true
	-- =>
	-- inv_S(ast) and inv_T1(r) 
	-- and
	-- mk_(ast, r) = opEE(bst, t)
	-- and
	-- bst.t2 = ast.t2 
	-- and
  -- bst.t1 < ast.t1
	-- and
	-- r < ast.t2
	-- and
	-- inv_S(bst) and inv_T1(t)
	-- and
	-- inv_S(ast) and inv_T1(r) and (RESULT < t2)
	-- and
	-- r < bst.t2 - (bst.t1 + t)
	--  	
	  -- = [predicate calculus, def opEE + simplifyng ":=" step]
	--
	-- inv_S(bst) and inv_T1(t) 
	-- =>
	-- inv_S(ast) and inv_T1(r) 
	-- and
	-- mk_(ast, r) = mk_(bst[t1+t/t1], bst.t2 - (bst.t1+t)) 
	--									--(t1 := t1+t; return t2 - t1;)
	-- and
	-- bst.t2 = ast.t2 
	-- and
  -- bst.t1 < ast.t1
	-- and
	-- r < ast.t2
	-- and
	-- inv_S(ast) and inv_T1(r) and (bst.t2 - (bst.t1 + t) < bst.t2)
	-- and
	-- r < bst.t2 - (bst.t1 + t)
	--
	  -- = [substitution, def of inv_S, inv_T]
	--
	-- bst.t1 > 0 and bst.t1 < M and bst.t2 > 0 and bst.t2 < M 
	-- and
	-- bst.t1 < bst.t2 
	-- and 
	-- t > 0 and t < M 
	-- =>
	-- ast.t1 > 0 and ast.t1 < M and ast.t2 > 0 and ast.t2 < M 
	-- and
	-- ast.t1 < ast.t2 
	-- and 
	-- r > 0 and r < M 
	-- and
	-- ast.t1 = bst.t1 + t and ast.t2 = bst.t2 and r = bst.t2 - (bst.t1+t)
	-- and
	-- bst.t2 = ast.t2 
	-- and
  -- bst.t1 < ast.t1
	-- and
	-- r < ast.t2
	-- and
	-- ast.t1 < ast.t2 and r < M and (bst.t2 - (bst.t1 + t) < bst.t2)
	-- and
	-- r < bst.t2 - (bst.t1 + t)
	--
		-- = [equality substitution: ast.t2=bst.t2, ast.t1=bst.t1+t, r = bst.t2 - (bst.t1+t)]
	--
	-- bst.t1 > 0 and bst.t1 < M and bst.t2 > 0 and bst.t2 < M 
	-- and
	-- bst.t1 < bst.t2 
	-- and 
	-- t > 0 and t < M 
	-- =>
	-- bst.t1 + t > 0 and bst.t1 + t < M and bst.t2 > 0 and bst.t2 < M 
	-- and
	-- bst.t1 + t < bst.t2 
	-- and 
	-- bst.t2 - (bst.t1+t) > 0 and bst.t2 - (bst.t1+t) < M 
	-- and
  -- bst.t1 < bst.t1 + t
	-- and
	-- bst.t2 - (bst.t1+t) < bst.t2
	-- and
	-- bst.t1 + t < bst.t2 and bst.t2 - (bst.t1+t) < M and (bst.t2 - (bst.t1 + t) < bst.t2)
	-- and
	-- bst.t2 - (bst.t1+t) < bst.t2 - (bst.t1 + t)
	--
			-- = [simplification of repeated predicates]
	--
	-- bst.t1 > 0 and bst.t1 < M and bst.t2 > 0 and bst.t2 < M 
	-- and
	-- bst.t1 < bst.t2 
	-- and 
	-- t > 0 and t < M 
	-- =>
	-- bst.t1 + t > 0 and bst.t1 + t < M 
	-- and
	-- bst.t1 + t < bst.t2 
	-- and 
	-- bst.t2 - (bst.t1+t) > 0 and bst.t2 - (bst.t1+t) < M 
	-- and
  -- bst.t1 < bst.t1 + t
	-- and
	-- bst.t2 - (bst.t1+t) < bst.t2
	-- and
	-- bst.t2 - (bst.t1+t) < bst.t2 - (bst.t1 + t)
	--
				-- = [non-linear arithmetic normalisation of > as <]
	--
	-- 0 < bst.t1 and bst.t1 < M and 0 < bst.t2 and bst.t2 < M 
	-- and
	-- bst.t1 < bst.t2 
	-- and 
	-- 0 < t and t < M 
	-- =>
	-- 0 < bst.t1 + t and bst.t1 + t < M 
	-- and
	-- bst.t1 + t < bst.t2 
	-- and 
	-- 0 < bst.t2 - (bst.t1+t)  and bst.t2 - (bst.t1+t) < M 
	-- and
  -- bst.t1 < bst.t1 + t
	-- and
	-- bst.t2 - (bst.t1+t) < bst.t2
	-- and
	-- bst.t2 - (bst.t1+t) < bst.t2 - (bst.t1 + t)
	--
					-- = [non-linear arithmetic properties]
	--
	-- 0 < bst.t1 and bst.t1 < M and 0 < bst.t2 and bst.t2 < M 
	-- and
	-- bst.t1 < bst.t2 
	-- and 
	-- 0 < t and t < M 
	-- =>
	-- 0 < bst.t1 + t   	-- TRUE: given, 0 < bst.t1 and 0 < t
	-- and 
	-- bst.t1 + t < M 		-- MISSING: t < M - bst.t1
	-- and 
	-- 0 < bst.t2 and bst.t2 < M 
	-- and
	-- bst.t1 + t < bst.t2 
	-- and 
	-- 0 < bst.t2 - (bst.t1+t)  and bst.t2 - (bst.t1+t) < M 
	-- and
  -- bst.t1 < bst.t1 + t
	-- and
	-- bst.t2 - (bst.t1+t) < bst.t2
	-- and
	-- (bst.t2 - (bst.t1 + t) < bst.t2)
	-- and
	-- bst.t2 - (bst.t1+t) < bst.t2 - (bst.t1 + t)
	--
	 
end Minimal