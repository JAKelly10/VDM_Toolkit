module Poly
exports 
	functions
		inj_concat[@elem]: @elem * seq of @elem -> seq of @elem;
definitions 

functions 

	inj_concat[@elem]: @elem * seq of @elem -> seq of @elem
	inj_concat(e, s) == 
		let 
			s' : seq of @elem 
				 = if seq_is_flat_injective[@elem](s) then 
				 			s
				 	 else
				 	 		flat_injective[@elem](s)
		in 	
			flat_injective[@elem](s' ^ [e])
	post
		seq_is_flat_injective[@elem](RESULT);
		
	flat_injective[@elem]: seq of @elem -> seq of @elem
	flat_injective(s) == flat_injective0[@elem](s, [])
	post
		seq_is_flat_injective[@elem](RESULT);

-- assumes accumulated res is injective, flattens s's expressions
	flat_injective0[@elem]: seq of @elem * seq of @elem -> seq of @elem
	flat_injective0(s, res) ==
		if s = [] then
			res
		else if (is_(hd s, seq of @elem)) then
			flat_injective0[@elem](tl s, flat_injective0[?](hd s, res))
		else if hd s in set elems res then
			flat_injective0[@elem](tl s, res)
		else
			-- concatenation after the result to ensure its in proper order
			-- rather than (reversed) recursive call return order.
			flat_injective0[@elem](tl s, res ^ [hd s])
	pre
		seq_is_flat_injective[@elem](res)
	post
		seq_is_flat_injective[@elem](RESULT)
	-- NOTE: Overture has a bug here? It doesn't make appropriate measure calls for the inner make_injective function call
	measure
		lmeasure_flat_injective0
	;
		
	-- ex: make_injective[Expr]([A, B, Msg, [Msg2, Nonce], [A, Msg], A])
	--     ss 		 		 = [ [Msg2, Nonce], [A, Msg] ]
	--		 len s  		 = 6
	--		 len ss  		 = 2
	--		 len conc ss = 4
	--		 measure 		 = len s + len conc ss - len ss = 6 + 4 - 2 = 8
	--
	--NOTE: thanks to Tomo for spotting the counter example make_injective[Expr]([[X]]).
	--			the + 1 compensates for the situations where tl s is the sequenceof elements
	lmeasure_flat_injective0[@elem]: seq of @elem * seq of @elem -> nat
	lmeasure_flat_injective0(s, -) == 
		let 
			ss /*: seq of seq of @elem */ = [ s(i) | i in set inds s & is_(s(i), seq of @elem) ]
		in
			--cases ss:
			--	[]				-> len s,
			--	[[-]]			-> len s + 1,
			--	others		-> len s + len conc ss - len ss + 1
			--end
			if ss = [] then
				len s
			else
				0--len s + len conc ss - len ss + 1
			;

	seq_is_flat[@elem]: seq of @elem -> bool
	seq_is_flat(s) == forall i in set inds s & not is_(s(i), seq of @elem);
	
	seq_is_injective[@elem]: seq of @elem -> bool
	seq_is_injective(s) == len s = card elems s;

	seq_is_flat_injective[@elem]: seq of @elem -> bool
	seq_is_flat_injective(s) == seq_is_flat[@elem](s) and seq_is_injective[@elem](s);

/*
> default Poly
Default module set to Poly
> print inj_concat[nat|seq of nat](10, [1,[10],2,3])
[1, 10, 2, 3]
> print inj_concat[nat|seq of nat](20, [1,[10],2,3])
[1, 10, 2, 3, 20]
> print inj_concat[nat|seq of nat|seq of seq of nat](10, [1,[[10],3],2,3])
Error 4087: Cannot convert [[10], 3] (seq) to (nat | seq of (nat) | seq of (seq of (nat))) in 'Poly' (LaunchConfigurationExpression) at line 1:1
Runtime: Error 4087: Cannot convert [[10], 3] (seq) to (nat | seq of (nat) | seq of (seq of (nat))) in 'Poly' (LaunchConfigurationExpression) at line 1:1
> print is_([[10],3], seq of seq of nat
Syntax: Expecting ')' after is_ expression
> print is_([[10],3], seq of seq of nat)
false
> print is_([[10],3], seq of (nat | seq of nat))
true
> print inj_concat[nat|seq of nat|seq of (nat | seq of nat)](10, [1,[[10],3],2,3])
[1, 10, 3, 2]
*/
end Poly