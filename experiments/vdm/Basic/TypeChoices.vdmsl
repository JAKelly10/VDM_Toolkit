module TypeChoices
exports all
definitions 


-- Keep invariants close to your types  
-- Isabelle and VDM values for evaluation
values 	
	MAX_DOT : nat = 16;
types
	Dot0 = nat;
	
	Move0 ::
		x: Dot0 
		y: Dot0
	inv mk_Move0(x,y) == x > 0 and y > 0 and x <= 16 and y <= 16;
	
	Move01 ::
		x: Dot0 
		y: Dot0
	inv mk_Move01(x,y) == x > 0 and y > 0 and x <= 16 and y <= 16 and x < y;
	
	Dot1 = nat1
	inv d == d <= MAX_DOT;
	
	Move1 ::
		x: Dot1 
		y: Dot1
	inv mk_Move1(x,y) == x < y;
	
	Move2 ::
		x: Dot1
		y: Dot1
	inv mk_Move2(x,y) == moves_are_ordered(x,y);

-- create an abstraction to the meaning of the expression, 
-- that compartimentalise, makes it clear to read, and easier to prove. 
functions
  moves_are_ordered: Dot1 * Dot1 -> bool
  moves_are_ordered(x,y) == x < y;
  	
-- play with "value" equivalent in Overture:
--values
-- M0 = let s = { mk_Move0(x,y) | x in set {1,...,16}, y in set {1,...,16} } in mk_(card s, s);
-- M1 = let s = { mk_Move01(x,y) | x in set {1,...,16}, y in set {1,...,16} } in mk_(card s, s);
-- M2 = let s = { mk_Move01(x,y) | x in set {1,...,16}, y in set {1,...,16} & x < y } in mk_(card s, s);
-- M3 = let s = { mk_Move1(x,y) | x in set {1,...,MAX_DOT}, y in set {1,...,MAX_DOT} & x < y } in mk_(card s, s); 

end TypeChoices