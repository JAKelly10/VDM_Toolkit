module Recursion
imports 
from IO 
	operations 
		printf renamed printf
		print renamed print
exports all
definitions 

functions

	fold: (nat * nat +> nat) * nat * seq of nat +> nat
  fold(f, e, s) == 
  	cases s:
       []    -> e,
       [x]   -> x,
       s1^s2 -> f(fold(f,e,s1), fold(f,e,s2))
    end
  measure 
  	len s;
  	
  --sum([1,2,3,4,5])
  --fold(add, 0, [1,2,3,4,5])
  --[1,2,3,4,5] =s1^s2
	--add(fold(add, 0, [1,2,3]), fold(add, 0, [4,5]))
	--add(fold(add, 0, [1,2,3]), fold(add, 0, [4,5]))
	--add(add(1, add(2, add(3, add(4, add(5, 0))))))
	--add(add(1, add(2, add(3, add(4, 5 + 0)))))
	--add(add(1, add(2, add(3, add(4, 5)))))
	--add(add(1, add(2, add(3, 4 + 5))))
	--....  
	add: nat * nat -> nat
  add(m,n) == m+n;

  mult: nat * nat -> nat
  mult(m,n) == m*n;
                   
  sum: seq of nat -> nat
  sum(s) == fold(add,0,s);

	num_of: char * nat -> seq of char
	num_of(c, n) ==
		if n = 0 then 
			[]
		else
			[c] ^ num_of(c,n-1)
	measure
		n;
		
	knuth_arrow: nat * nat * nat -> nat
	knuth_arrow(a,n,b) ==
		if n = 0 then
			a * b
		else if b = 0 then
			1
		else
			knuth_arrow(a, n-1, (knuth_arrow(a, n, b-1)))
	--measure
		--if n = 0 or b = 0 then 0 else n
	--	if b > 0 then b else n
	;
	
	ack: nat * nat -> nat
	ack(m,n) == 
		if m = 0 then
			n+1
		else if n = 0 then -- m > 0
			ack(m-1,1)
		else -- m > 0 and n > 0
			ack(m-1,ack(m,n-1))
	--measure
		--m*n+n
		--if n = 0 then m else m*n+n
		--m = 0 then 0 else if n = 0 then m else n
	;	
	
	ackF: nat -> (nat -> nat)
	ackF(m) == 
		if m = 0 then 
			(lambda x: nat & x + 1)
		else 
			(lambda n: nat & iter(ackF(m-1), n))
	measure
		ackF_measure
	;
	
	ackF_measure: nat -> nat
	ackF_measure(m) == m;
	
	iter: (nat -> nat)  * nat -> nat
	iter(f, n) == 
		if n = 0 then
			f(1)
		else
			f(iter(f,n-1))
	measure
		n
	;
		
state RecursionSt of
	tabs: nat
init tabs == tabs = mk_RecursionSt(0)
end

operations

	Acckerman: nat * nat ==> nat
	Acckerman(m,n) == 
		(printf("Acckerman(%1s,%2s)\n",[m,n]);
		 if m = 0 then
			 return n+1
		else if n = 0 then -- m > 0
			Acckerman(m-1,1)
		else -- m > 0 and n > 0
			Acckerman(m-1,Acckerman(m,n-1))
		)
	--measure
		--m*n+n
		--if n = 0 then m else m*n+n
		--m = 0 then 0 else if n = 0 then m else n
	;	

	Knuth_Arrow0: nat * nat * nat ==> nat
	Knuth_Arrow0(a,n,b) ==
		(if n = 0 then
			 return a * b
		 else if b = 0 then
		 	 return 1
		 else
		 	 return Knuth_Arrow0(a,n-1,(Knuth_Arrow0(a,n,b-1)));
		);	
		
	printtabs: () ==> ()
	printtabs() == (if tabs > 0 then printf("\n%1s",[num_of('\t',tabs)]));

	Knuth_Arrow: nat * nat * nat ==> nat
	Knuth_Arrow(a,n,b) ==
		(dcl result: nat := 0;
				(printtabs();
				 printf("Knuth_Arrow(%1s,%2s,%3s) = ",[a,n,b]);
				 tabs := tabs+1;
				 if n = 0 then
				 	 result := a * b
				 else if b = 0 then
				 	 result := 1
				 else
				 	 result := Knuth_Arrow(a,n-1,(Knuth_Arrow(a,n,b-1)));
				 printf("%1s", [result]);
		 		 tabs := tabs-1;
		 		 --printf("Knuth_Arrow(%1s,%2s,%3s) = %4s\n",[a,n,b,result]);
		 	 );
		 	 return result;
		);	
	
	Knuth_Arrow1: nat * nat * nat ==> nat
	Knuth_Arrow1(a,n,b) ==
		(dcl result: nat := 0;
				(printtabs();
				 printf("Knuth_Arrow1(%1s,%2s,%3s) = ",[a,n,b]);
				 tabs := tabs+1;
				 if n = 0 then
				 	 (result := a * b;
				 	  printf("%1s*%2s = %3s", [a,b,result]);
				 	 )
				 else if b = 0 then
				 	 (result := 1;
				 	 )
				 else
				 	 (printtabs();
				 	  printf("Knuth_Arrow1(%1s,%2s,%3s) = ",[a,n-1,knuth_arrow(a,n,b-1)]);
				  	result := Knuth_Arrow1(a,n-1,(Knuth_Arrow1(a,n,b-1)));
				   );
				 printf("%1s", [result]);
		 		 tabs := tabs-1;
		 		 --printf("Knuth_Arrow(%1s,%2s,%3s) = %4s\n",[a,n,b,result]);
		 	 );
		 	 return result;
		);
end Recursion