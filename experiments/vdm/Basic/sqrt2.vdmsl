module sqrt2
exports all
definitions 

types
	Decimal = real
	inv d == d >= 0 and d < 1;

values
	FLT_EPSILON: int = 1;
	PRECISION  : nat = 20;
		
functions
	--@doc R1: calculate the square root of a given number
	--@doc R2: result must be within mathematical understanding of square root
	--@doc R3: provide tests to show results adhere to intent
	--https://math.stackexchange.com/questions/462443/calculating-non-integer-exponent#463161
	sqrt0: int -> real
	sqrt0(value) == 
		is not yet specified
	pre
		value >= 0
	post
		--2.23606 * 2.23606 = 4.999998 ~= 5!
		RESULT * RESULT = value;

	sqrt: int * real -> real
	sqrt(value, err) == is not yet specified
	pre
		value >= 0
		and
		err > 0 and err <= value
	post
		(RESULT * RESULT) - err <= value
		and
		(RESULT + 1) * (RESULT + 1) > value;
	
	get_int: real -> int
	get_int(r) == floor(r)
	post
		RESULT <= r;
	
	approx: real * nat -> real
	approx(m, precision) == m * (10**precision);
		
	get_dec: real -> Decimal
	get_dec(r) == 
		let r': real = abs(r) in
			r' - get_int(r');
	
	int_typed0: real -> bool
	int_typed0(r) == get_int(r) = r;
	
	min: int * int -> int
	min(x,y) == if x < y then x else y;
	
	max: int * int -> int
	max(x,y) == if x < y then y else x;
	 
	int_typed: real * nat -> bool
	int_typed(r, precision) == 
		let r' : int = get_int(approx(r, precision)),
				r'': int = get_int(approx(get_int(r), precision)) in
			max(r', r'') - min(r', r'') <= FLT_EPSILON;

	dec_to_frac: real * (int * int) * nat -> int * int
	dec_to_frac(r, mk_(n,d), precision) ==
		if is_nat1(precision) and not int_typed(r, precision) then	
			dec_to_frac(r*10, mk_(n*10, d*10), precision-1)
		else	
			mk_(n, d)
	measure
		precision;
	
	get_numer: real -> int
	get_numer(r) == let mk_(n,-) = dec_to_frac(r, mk_(get_int(r), 1), PRECISION) in n;
		
	get_denom: real -> int
	get_denom(r) == let mk_(-,d) = dec_to_frac(r, mk_(get_int(r), 1), PRECISION) in d;
	
end sqrt2