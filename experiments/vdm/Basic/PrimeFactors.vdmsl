module PrimeFactors
exports all
definitions 

state StateName of
-- TODO Define state here
end 
	 
-- TODO Define types here
values 
	PRIMES : seq1 of nat = [2,3,5,7,11,13,17,19,23,29];
	
-- TODO Define values here
functions 

gcd : nat * nat -> nat
gcd(x,y) ==  (if y = 0 then x else gcd(y, x mod y));

lcm : nat * nat -> nat
lcm(x,y) == x * y div gcd(x,y);

coprime : nat * nat -> bool
coprime(x,y) == gcd(x,y) = 1;

factors: nat * seq1 of nat -> seq of nat
factors(x,P) == 
	let p = hd P in
		if (gcd(x,p) = 1) then factors(x, tl P) else [p] ^ factors(x div p, P)

-- TODO Define functions here
operations 
-- TODO Define operations here
end PrimeFactors