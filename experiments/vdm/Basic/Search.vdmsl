module Search
exports all
definitions 

types
	SortKind = <Select> | <Merge> | <Quick>;
	
functions
  -- The number of times an element appears in a sequence.
  numOccurs: nat * seq of nat +> nat
  numOccurs(e,sq) == len [ 0 | i in set inds sq & sq(i) = e ];

  -- Is one sequence a permutation of another?
  permutation: seq of nat * seq of nat +> bool
  permutation(sq1,sq2) ==
    len sq1 = len sq2 and
    forall i in set inds sq1 & numOccurs(sq1(i),sq1) = numOccurs(sq1(i),sq2);
	
	sort: seq of nat * SortKind -> seq of nat
	sort(s, kind) == 
		cases kind:
			<Select> -> selection_sort(s),
			<Merge>  -> merge_sort(s),
			<Quick>  -> quick_sort(s)
		end
	post
		permutation(s, RESULT)
		and
		forall i in set inds RESULT \ {len RESULT} & RESULT(i) <= RESULT(i+1);

	remove : nat * seq of nat -> seq of nat 
	remove (x,l) ==
	  let i in set inds l be st l(i) = x in
	    l(1,...,i-1) ^ l(i+1,...,len l) 
	pre 
		x in set elems l
	post
		len RESULT + 1 = len l
		and
		elems RESULT subset elems l;
	
	selection_sort : seq of nat -> seq of nat 
	selection_sort (l) ==
	  if l = [] then []
	  else let m in seq l be st
	          (forall x in seq l & m <= x)
	        in
	          [m] ^ selection_sort(remove(m,l))
	measure
		sort_measure; 
	          
	lmerge : seq of nat * seq of nat -> seq of nat 
	lmerge (l1,l2) ==
	  if     l1 = [] then l2
	  elseif l2 = [] then l1
	  elseif (hd l1) < (hd l2) then 
	    [hd l1] ^ (lmerge (tl l1, l2)) 
	  else 
	    [hd l2] ^ (lmerge (l1, tl l2))
	measure
		sort_measure2;
    
   --@doc = eq_ord not necessary for this one
	merge_sort : seq of nat -> seq of nat 
	merge_sort (l) ==
	  cases l:
	    []      -> [],
	    [x]     -> [x],
	    l1 ^ l2 -> lmerge (merge_sort(l1), merge_sort(l2))
	  end
	measure
		sort_measure;
	
	quick_sort : seq of nat -> seq of nat 
	quick_sort (l) ==
	  cases l:
	    []      -> [],
	    [x]     -> [x],
	    [x,y]   -> if x < y then [x,y] else [y,x], 
	    -^[x]^- -> quick_sort([l(i) | i in set inds l & l(i) < x ]) ^ 
	                         [l(i) | i in set inds l & l(i) = x] ^
	               quick_sort([l(i) | i in set inds l & l(i) > x ])
	  end
	measure
		sort_measure;
		
	sort_measure: seq of nat -> nat
	sort_measure(s) == len s;

	sort_measure2: seq of nat * seq of nat -> nat
	sort_measure2(l1,l2) == len l1 + len l2;

values
	s1: seq of nat = [1,2,3,4,5,6,7,8,9,10];
	s2: seq of nat = [10,9,8,7,6,5,4,3,2,1];
	s3: seq of nat = [2,10,3,6,1,7,4,5,8,9];
	
traces
	SORT_SELECT: 
		let s in set {s1, s2,s3} in sort(s,<Select>);
		
	SORT_MERGE: 
		let s in set {s1, s2,s3} in sort(s,<Merge>);

	SORT_QUICK: 
		let s in set {s1, s2,s3} in sort(s,<Quick>);
end Search