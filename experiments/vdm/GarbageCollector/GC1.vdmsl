module GC1
imports 
from GC0
	types
		Addr renamed Addr;
		Sigma0 renamed Sigma0;
		
	functions
		hat renamed hat;
		
	values
		ALL_ADDR renamed ALL_ADDR;
		
exports 
	types
		struct Sigma1;
		struct Heap;
		struct Node;
		
	functions
		reach: set of Addr * Heap -> set of Addr;
		garbage1: set of Addr * set of Addr * Heap -> set of Addr;
		retr0: Sigma1 -> Sigma0;
		
	values
		ALL_RADDR: set of (Addr * Addr);
		empty_heap: Heap;
		
	operations
		Collector1: () ==> ();
		Mutator1  : () ==> ();
		
definitions 

state StateSigma1 of
	roots: set of Addr
	hp	 : Heap
	free : set of Addr
inv mk_StateSigma1(roots, hp, free) ==
	dom hp = ALL_ADDR
	and
	free inter reach(roots, hp) = {}
	and
	rng(free <: hp) = {[]}
init gc1 == gc1 = mk_StateSigma1({0}, empty_heap, {0})
end 

types 
	Heap = map Addr to Node;
	
	Node = seq of [Addr];
	
	-- annoying repetition needed for the import of Sigma1 for retr1
	Sigma1 ::
		roots: set of Addr
		hp	 : Heap
		free : set of Addr
	inv mk_Sigma1(roots, hp, free) ==
		dom hp = ALL_ADDR
		and
		free inter reach(roots, hp) = {}
		and
		rng(free <: hp) subset {[]};
	
values
	ALL_RADDR: set of (Addr * Addr) = {mk_(a,b) | a in set ALL_ADDR, b in set ALL_ADDR};
	
	empty_heap: Heap = { a |-> [] | a in set ALL_ADDR };
	
functions 
--------------------------------------------------------
------ VDM Relational library specialised for Addr -----
--------------------------------------------------------

	ran: set of (Addr * Addr) -> set of Addr
	ran(R) == { b | mk_(-,b) in set R };
	
	dres: set of Addr * set of (Addr * Addr) -> set of (Addr * Addr)
	dres(S, R) == { mk_(a,b) | mk_(a,b) in set R & a in set S }; 
	
	rcomp: set of (Addr * Addr) * set of (Addr * Addr) -> set of (Addr * Addr)
	rcomp(R,Q) == { mk_(a,c) | a in set ALL_ADDR, c in set ALL_ADDR & exists b in set ALL_ADDR & mk_(a,b) in set R and mk_(b,c) in set Q };

	id: set of Addr -> set of (Addr * Addr)
	id(R) == { mk_(a,a) | a in set R };

	--ztrancl: set of (Addr * Addr) -> set of (Addr * Addr)
	--ztrancl(R) == dinter { Q | Q in set power ALL_RADDR & R subset Q and rcomp(Q, Q) subset Q };

	zrtrancl: set of (Addr * Addr) -> set of (Addr * Addr)
	zrtrancl(R) == dinter { Q | Q in set power ALL_RADDR & id(ALL_ADDR) subset Q and R subset Q and rcomp(Q, Q) subset Q };

/*
  R+ = Union i > . iter i R

	rtrancl_ind: set of (Addr * Addr) -> bool
	rtrancl_ind(r) == forall a in set ALL_ADDR & mk_(a,a) in set r;

	trancl: set of (Addr * Addr) -> set of (Addr * Addr)
	trancl(ss) == 
		if ss = {} then 
			ss
		else
			ss 
			union 
			let mk_(b,c) in set ss in
				{ mk_(a,c2) | mk_(a,c2) in set trancl(ss \ {mk_(b,c)}) & mk_(a, b) in set trancl(ss \ {mk_(b,c)}) };
				
--		{ mk_(a,c) | mk_(a,c) in set trancl(ss) & exists b in set ALL_ADDR & mk_(a,b) in set rtrancl(ss) and mk_(b,c) in set ss };

	rtrancl: set of (Addr * Addr) -> set of (Addr * Addr)
	rtrancl(ss) == 
		{ mk_(a,a) | mk_(a,a) in set ss }
		union
		trancl(ss);
*/
--------------------------------------------------------
--------------------------------------------------------
		
	child_rel: Heap -> set of (Addr * Addr) 
	child_rel(hp) == { mk_(a,b) | a in set dom hp, b in set ALL_ADDR & b in set (elems hp(a) \ {nil}) };
	
	reach: set of Addr * Heap -> set of Addr
	reach(s, hp) == ran(dres(s, zrtrancl(child_rel(hp)))); 
	
	garbage1: set of Addr * set of Addr * Heap -> set of Addr
	garbage1(r, f, h) == ALL_ADDR \ (reach(r, h) union f);	
--% \begin{fn}{garbage}{r, f, hp}
--%  \signature{\setof{Addr} \x \setof{Addr} \x Heap \to \setof{Addr}}
--%   Addr \minus (reach(r, hp) \union f)
--% \end{fn}
	
	retr0: Sigma1 -> Sigma0
	retr0(mk_Sigma1(roots, hp, free)) == mk_Sigma0(reach(roots, hp), free);
	
	--NOTE: There is an assumption that roots is constant, so it appears in all frames as read only and also in all relies 
operations 
	Collector1() ==
		return
	ext wr free
			rd roots, hp
	pre true
	post (ALL_ADDR \ reach(roots, hp)) subset dunion hat(free~);
	
	--pre  inv_Sigma1
	--rely inv_Sigma1 and garbage1(roots, free, hp) subset garbage1(roots, free', hp') and free' subset free and roots' = roots
	--guar inv_Sigma1 and free subset free' and roots' = roots and hp' = hp
	--post inv_Sigma1 and (ALL_ADDR \ reach(roots, hp)) subset dunion hat(free) 

	Mutator1() ==
		return
	ext wr hp, free
			rd roots
	pre true
	post true
	
	--pre  inv_Sigma1
	--rely inv_Sigma1 and free' <-: hp' = free' <-: hp and free subset free' and roots' = roots
	--guar inv_Sigma1 and garbage1(roots, free, hp) subset garbage1(roots, free', hp') and free' subset free and roots' = roots
	--post inv_Sigma1
	
--------------------------------------------------------
-- Rigorous proof sketches
--------------------------------------------------------

-- lemma: s1 subset s2 => reach(s1, hp) subset reach(s2, hp)
-- =[expand reach]
-- 1. s1 subset s2 => ran(dres(s1, zrtrancl(child_rel(hp)))) subset ran(dres(s2, zrtrancl(child_rel(hp))))
-- =[ZEVES-ranSubset]
-- 1. s1 subset s2 => dres(s1, zrtrancl(child_rel(hp))) subset dres(s2, zrtrancl(child_rel(hp)))
-- =[pick R=zrtrancl(child_rel(hp))]
-- 1. s1 subset s2 => dres(s1, R) subset dres(s2, R)
-- =[expand subset]
-- 1. forall y in set s1 & y in set s2 => forall x in set dres(s1, R) & x in set dres(s2, R)
-- =[allI, rel type]
-- 1. forall y in set s1 & y in set s2; mk_(a,b) in set dres(s1, R) => mk_(a,b) in set dres(s2, R)
-- =[ZEVES-inDres, conjE]
-- 1. forall y in set s1 & y in set s2; mk_(a,b) in set R; a in set s1 => mk_(a,b) in set R and a in set s2
-- =[conjI, assumption]
-- 1. forall y in set s1 & y in set s2; mk_(a,b) in set R; a in set s1 => a in set s2
-- =[allE[of a]]
-- 1. a in set s1 => a in set s2; mk_(a,b) in set R; a in set s1 => a in set s2
-- =[impE]
-- 1. a in set s2; mk_(a,b) in set R; a in set s1 => a in set s1
-- 2. a in set s2; mk_(a,b) in set R; a in set s1 => a in set s2
-- =[assumption twice]
-- No subgoals!

-- theorem (Commutativity of rely-guar): 
-- guar-Collector1 => rely-Mutator1 => guar-Mutator1 => rely-Collector1
-- =[expand]
-- 1.guar-Collector0 => rely-Mutator0 => inv_Sigma1 and guarantee(roots, free, hp) subset garbage1(roots, free', hp') and free' subset free => inv_Sigma1 and garbage1(roots, free, hp) subset garbage1(roots, free', hp') and free' subset free
-- =[assumption]
-- No subgoals!

-- theorem (Commutativity of rely-guar): 
-- guar-Mutator1 => rely-Collector1 => guar-Collector1 => rely-Mutator1
-- =[expand]
-- 1. guar-Mutator1 => rely-Collector1 => inv_Sigma1 and free subset free' => inv_Sigma1 and free' <-: hp' = free <-: hp and free subset free'
-- =[assumption]
-- 1. guar-Mutator1 => rely-Collector1 => inv_Sigma1 and free subset free' => free' <-: hp' = free <-: hp 
-- ?????

-- theorem (Adequacy): 
-- forall s0 in set Sigma0 & exists s1 in set Sigma1 & retr0(s1) = s0
-- =[allI, expand retr0, type info]
-- 1. s0 in set Sigma0; inv_Sigma0(s0) => exists s1 in set Sigma1 & inv_Sigma1(s1) and s0 = mk_Sigma0(reach(s1.roots, s1.hp), s1.free)
-- =[expand inv_Sigma0, record type info Sigma0]
-- 1. busy, free in set Addr; busy inter free = {} => exists s1 in set Sigma1 & inv_Sigma1(s1) and mk_Sigma0(busy, free) = mk_Sigma0(reach(s1.roots, s1.hp), s1.free)
-- =[record equality Sigma0]
-- 1. busy0, free0 in set Addr; busy0 inter free0 = {} => exists s1 in set Sigma1 & inv_Sigma1(s1) and busy0 = reach(s1.roots, s1.hp) and free0 = s1.free
-- =[record type info for Sigma1]
-- 1. busy0, free0 in set Addr; busy0 inter free0 = {} => exists roots1, free1 in set Addr; hp1: Heap & inv_Sigma1(mk_Sigma1(roots1, hp1, free1)) and busy0 = reach(roots1, hp1) and free0 = free1
-- =[one point rule on free1]
-- 1. busy0, free0 in set Addr; busy0 inter free0 = {} => free0 in set Addr
-- 2. busy0, free0 in set Addr; busy0 inter free0 = {} => exists roots1 in set Addr; hp1: Heap & inv_Sigma1(mk_Sigma1(roots1, hp1, free0)) and busy0 = reach(roots1, hp1)
-- =[assumption, expand inv_Sigma1]
-- 1. busy0, free0 in set Addr; busy0 inter free0 = {} => exists roots1 in set Addr; hp1: Heap & dom hp = ALL_ADDR and free0 inter reach(roots1, hp1) = {} and rng(free0 <: hp1) = {[]} and busy0 = reach(roots1, hp1)
-- =[equality substitute backwards busy0 in concl, exists contraction on non quantified variable free0 and busy0]
-- 1. busy0, free0 in set Addr; busy0 inter free0 = {} => free0 inter busy0 = {} and (exists roots1 in set Addr; hp1: Heap & dom hp = ALL_ADDR and rng(free0 <: hp1) = {[]} and busy0 = reach(roots1, hp1))
-- =[conjI]
-- 1. busy0, free0 in set Addr; busy0 inter free0 = {} => free0 inter busy0 = {} 
-- 2. busy0, free0 in set Addr; busy0 inter free0 = {} => (exists roots1 in set Addr; hp1: Heap & dom hp = ALL_ADDR and rng(free0 <: hp1) = {[]} and busy0 = reach(roots1, hp1))
-- =[assumption, expand reach]
-- 1. busy0, free0 in set Addr; busy0 inter free0 = {} => (exists roots1 in set Addr; hp1: Heap & dom hp = ALL_ADDR and rng(free0 <: hp1) = {[]} and busy0 = ran(dres(roots1, zrtrancl(child_rel(hp1))))
-- =[exI on roots1, exI[of "% x in set ALL_ADDR _"] on hp1?]
-- 1. busy0, free0 in set Addr; busy0 inter free0 = {} => ?roots1 in set Addr and dom (% x in set ALL_ADDR & _) = ALL_ADDR and rng(free0 <: (% x in set ALL_ADDR & _)) = {[]} and busy0 = ran(dres(?roots1, zrtrancl(child_rel((% x in set ALL_ADDR & _)))))
-- =[dom of %]
-- 1. busy0, free0 in set Addr; busy0 inter free0 = {} => ?roots1 in set Addr and ALL_ADDR = ALL_ADDR and rng(free0 <: (% x in set ALL_ADDR & _)) = {[]} and busy0 = ran(dres(?roots1, zrtrancl(child_rel((% x in set ALL_ADDR & _)))))
--
-- =[refl, hide type info, conjI, pick ?R=(% x in set ALL_ADDR & ?rng_hp)]
-- 1. busy0 inter free0 = {} => rng(free0 <: ?R) = {[]}  
-- 2. busy0 inter free0 = {} => busy0 = ran(dres(?roots1, zrtrancl(child_rel(?R))))
-- =[extensionality/equalityI+subsetI concl, allI, ZEVES-inUnit, eq-subst]
-- 1. busy0 inter free0 = {}; x in set rng(free0 <: ?R) => x = []  
-- 2. busy0 inter free0 = {} 													  => [] in set rng(free0 <: ?R)
-- 3. busy0 inter free0 = {} 														=> busy0 = ran(dres(?roots1, zrtrancl(child_rel(?R))))
-- =[ZEVES-inRan(1,2), exE(1)]
-- 1. busy0 inter free0 = {}; a in set Addr; x in seq of Addr; mk_(a,x) in set (free0 <: ?R) => x = []  
-- 2. busy0 inter free0 = {} 													  																		 => exists a in set Addr & mk_(a,[]) in set (free0 <: ?R)
-- 3. busy0 inter free0 = {} 																																 => busy0 = ran(dres(?roots1, zrtrancl(child_rel(?R))))
-- =[type info, ZEVES-inDres, conjE]
-- 1. busy0 inter free0 = {}; mk_(a,x) in set ?R; a in free0 => x = []  
-- 2. busy0 inter free0 = {} 													   		 => exists a in set Addr & mk_(a,[]) in set ?R and a in set free0			[okay, if ?R contains free0 elements in it mapped to []]
-- 3. busy0 inter free0 = {} 														 	 	 => busy0 = ran(dres(?roots1, zrtrancl(child_rel(?R))))								[mapped free0 elements to [] cannot be in busy0, Sigma0inv]
-- =[ZEVES-emptySeqDef, extensionality2/equalityI?]
-- 1. busy0 inter free0 = {}; mk_(a,x) in set ?R; a in free0 => x subset {} and {} subset x   
-- 2. busy0 inter free0 = {} 													   		 => exists a in set Addr & mk_(a,[]) in set ?R and a in set free0			[okay, if ?R contains free0 elements in it mapped to []]
-- 3. busy0 inter free0 = {} 														 		 => busy0 = ran(dres(?roots1, zrtrancl(child_rel(?R))))								[mapped free0 elements to [] cannot be in busy0, Sigma0inv]
-- =[ZEVES-nullSubset, subsetI+allI]
-- 1. busy0 inter free0 = {}; mk_(a,x) in set ?R; a in free0 => forall v in x & v in {}
-- 2. busy0 inter free0 = {} 													   		 => exists a in set Addr & mk_(a,[]) in set ?R and a in set free0			[okay, if ?R contains free0 elements in it mapped to []]
-- 3. busy0 inter free0 = {} 														 		 => busy0 = ran(dres(?roots1, zrtrancl(child_rel(?R))))								[mapped free0 elements to [] cannot be in busy0, Sigma0inv]
-- =[ZEVES-inNull]
-- 1. busy0 inter free0 = {}; mk_(a,x) in set ?R; a in free0; v in x => & false
-- 2. busy0 inter free0 = {} 													   	 	 => exists a in set Addr & mk_(a,[]) in set ?R and a in set free0			[okay, if ?R contains free0 elements in it mapped to []]
-- 3. busy0 inter free0 = {} 														 		 => busy0 = ran(dres(?roots1, zrtrancl(child_rel(?R))))								[mapped free0 elements to [] cannot be in busy0, Sigma0inv]

end GC1