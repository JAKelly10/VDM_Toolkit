module WhyMZPrelude

imports from WhyM 
			types   
					DefId	   renamed DefId;
					--Concept	   renamed Concept;
					--Structure  renamed Structure;
				  --  DefOrigin  renamed DefOrigin;
					Signature  renamed Signature;

					Atom	   renamed Atom;
					TermData   renamed TermData;
					Expr	   renamed Expr;
					VarId	   renamed VarId;

					TheoryId   renamed TheoryId;
					--Theory	   renamed Theory;
					--Definition renamed Definition;
					--Conjecture renamed Conjecture;

			operations
					newTheory  		renamed newTheory;
					newDefinition	renamed newDefinition;
					createVarId		renamed createVarId;
					ShowWorld		renamed ShowWorld;
				
exports all

definitions 

state ZPrelude of
   thy: [TheoryId]
   vars: set of VarId
   defs: set of DefId
inv mk_ZPrelude(thy, vars, defs) == 
		-- what if I don't need any invariant? If don't have anything, tid/defs appear as not being used
		--tid = nil or tid <> nil or defs = {} or defs <> {}
		thy <> nil => vars <> {} and defs <> {}
init zp == zp = mk_ZPrelude(nil, {}, {})-- TODO: why/when can I call WhyM ops newTheory("bla"), {})
end;

operations

--<CONSTRUCTOR> -- constructor
--		| <DESTRUCTOR>	-- destructor
--		| <FUNCTIONAL>  -- function ? unnecessary?
--		| <POINTWISE>	-- definition is given/used pointwise 
--		| <SET_BASED>	-- definition is for set based resoning
--		| <SEQ_BASED>	-- definition is for seq/list based reasoning
--		| <EXTENSIONAL>	-- equality as quantified comparison (e.g., x=y iff (ALL i: x @ i:y) and...)
--		| <LIEBINITZ>

-- \power; \nat; (_+_);  cross? arithmos?
Parse: seq1 of char ==> ()
Parse(name) == 
	 (dcl tid	   : TheoryId := newTheory(name),
		  typeX    : VarId := createVarId(), -- pass name?
		  powerTerm: Expr  := mk_Expr(mk_Atom(mk_TermData({}, { typeX }), mk_token("POWER X")), mk_token("SET OF X"), nil),    -- prefix set operator
		  powerId  : DefId := newDefinition(tid, powerTerm, <CORE>, {<CONSTRUCTOR>, <SET_BASED>}, <EXTENSIONAL>, "Power set constructor"),

		  natType  : Signature := mk_token("NAT"),
		  natVarId : VarId := createVarId(),
		  natTerm  : Expr  := mk_Expr(mk_Atom(mk_TermData({natVarId}, {}), mk_token("NAT")), natType, mk_token("0")),
		  natId	   : DefId := newDefinition(tid, natTerm, <CORE>, {<CONSTRUCTOR>}, <EXTENSIONAL>, "Natural numbers"),
		  
		  x	       : VarId := createVarId(),
		  y		   : VarId := createVarId(),
		  plusTerm : Expr  := mk_Expr(mk_Atom(mk_TermData({x, y}, {}), mk_token("(_+_)")), mk_token("FCN NAT x NAT TO NAT"), nil),
		  plusId   : DefId := newDefinition(tid, plusTerm, <CORE>, {<CONSTRUCTOR>, <POINTWISE>}, <EXTENSIONAL>, "Arithmetic summation"),

		  typeY	   : VarId := createVarId(),
		  crossTerm: Expr  := mk_Expr(mk_Atom(mk_TermData({x,y}, {typeX, typeY}), mk_token("(_x_)")), mk_token("FCN SET X x SET Y TO SET(X x Y)"), nil),
		  crossId  : DefId := newDefinition(tid, crossTerm, <CORE>, {<CONSTRUCTOR>, <SET_BASED>}, <EXTENSIONAL>, "Cross product")
			
		;
		atomic(
			thy  := tid;
			vars := vars union {typeX, natVarId, x, y, typeY};
			defs := defs union {powerId, natId, plusId, crossId}
		);
	 	ShowWorld(); 
	);

end WhyMZPrelude