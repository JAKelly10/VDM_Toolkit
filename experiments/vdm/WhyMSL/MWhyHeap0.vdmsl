module MWhyHeap0
imports from MWhy 
	types
			FnSig renamed FnSig;
			FnInfo renamed FnInfo;
			Conjecture renamed Conjecture;
			Sequent renamed Sequent;
			Body renamed Body;
			
exports all
definitions 

types
	Loc = nat;
	F0  = set of Loc;
	 
functions
	f_nat  : nat -> bool
	f_nat(n) == n < MAX_NAT;
	 
	f_nat1 : nat -> bool
	f_nat1(n) == f_nat(n) and n > 0;
	
	locs_of: Loc * nat -> F0
	locs_of(l, s) == if f_nat1(s) then {l,...,l+s} else undefined; -- or nil?
	
	isBlock: Loc * nat * F0 -> bool 
	isBlock(l, s, f) == f_nat1(s) and locs_of(l, s) subset f; 

	new0_pre: F0 * nat -> bool
	new0_pre(f, s) == exists l in set NAT & isBlock(l, s, f);

	new0_post: F0 * nat * F0 * Loc -> bool
	new0_post(f, s, f', r) == isBlock(r, s, f) and f' = f \ locs_of(r, s);
	
	PO_new0_feas: () -> bool
	PO_new0_feas() == forall f in set power NAT, s in set NAT & 
											new0_pre(f, s) => 
													exists f' in set power NAT, r in set NAT & 
														new0_post(f, s, f', r);

/*
	
	=
	forall f in set power {0,...,2}, s in set {0,...,2} & 
		(exists l in set {0,...,2} & s > 0 and {l,...,l+s} subset f)
		=>
		(exists f' in set power {0,...,2}, r in set {0,...,2} &
			s > 0 and {r,...,r+s} subset f and
			f' = f \ {r,...,r+s})
	
	*/
	

values 
	MAX_NAT = 2;
	NAT = {0,...,MAX_NAT};

-- VDM body	
values
	-- default VDM types
	nat_tyId  = mk_token("nat");
	bool_tyId = mk_token("bool");
	
	-- VDM body
	bdVDM: Body = 
  					mk_Body(
	  					--{}, 			-- uses			: set of BdId
	  					<Library>,	-- domain		: Domain
	  					{nat_tyId, 
	  					 bool_tyId},	   	-- types			: set of TyId or map TyId to TyDefn
	  					{ |-> },		-- functions_: map FnId to FnInfo		
	  					{ |-> },		-- results		: ConjIt to Conjecture
	  					{ |-> }, 	-- focuses		: FocusId to Focus
	  					{ |-> },	  -- strats		: StratId to Strategy
	  					{}					-- connections: set of (Relationship * BdId) 
	  				);
	
-- Heap0 body
values 
	-- declared Heap0 types
	Loc_tyId  = mk_token("Loc");
	F0_tyId   = mk_token("F0");
	
	-- declared Heap0 functions
	
		-- locs_of: Loc * nat -> F0
	locs_of_fid = mk_token("locs_of");
	locs_of_sig = mk_FnSig([Loc_tyId, nat_tyId], F0_tyId);
	locs_of_info= mk_FnInfo(locs_of_sig, {<Def>}, 
									mk_token("if f_nat1(s) then {l,...,l+s} else undefined"));
	
		-- isBlock: Loc * nat * F0 -> bool
	isBlock_fid = mk_token("isBlock");
	isBlock_sig = mk_FnSig([Loc_tyId, nat_tyId, F0_tyId], bool_tyId);
	isBlock_info= mk_FnInfo(isBlock_sig, {<Def>}, 
									mk_token("f_nat1(s) and locs_of(l, s) subset ls"));
	
		-- new0_pre: F0 * nat -> bool
	new0_pre_fid = mk_token("new0_pre");
	new0_pre_sig = mk_FnSig([F0_tyId, nat_tyId], bool_tyId);
	new0_pre_info= mk_FnInfo(new0_pre_sig, {<Pre>}, 
									mk_token("exists l in set NAT & isBlock(l, s, f)"));
									
		-- new0_post: F0 * nat * F0 * Loc -> bool
	new0_post_fid = mk_token("new0_post");
	new0_post_sig = mk_FnSig([F0_tyId, nat_tyId, F0_tyId, Loc_tyId], bool_tyId);
	new0_post_info= mk_FnInfo(new0_post_sig, {<Post>}, 
									mk_token("isBlock(r, s, f) and f' = f \\ locs_of(r, s)"));

	-- declared Heap0 conjectures
	
	FEAS_why					= mk_token("why_feas");
	PO_feas_cid			= mk_token("PO_feas_general");
	
	PO_new0_feas_cid = mk_token("PO_new0_feas");
	PO_new0_feas_conj= mk_Conjecture(
												-- what: Judgement (use Sequent? Or just Assertion then)
													--mk_token("forall f, s & new0_pre(f, s) => exists f', r & new0_post(f, s, f', r)")	,
												mk_Sequent(
													{mk_token("f"),mk_token("s")},
													[mk_token("new0_pre(f, s)")],
													mk_token("exists f', r & new0_post(f, s, f', r)")
												),
												-- justifs: map JusId to Justification
												{ |-> },
												-- specialises: [ConjId] or nil TODO:
												PO_feas_cid,
												-- provenance: seq of (Origin | Why)
												[FEAS_why]	
										);

	EXPOSE_POST_why	  	 			 = mk_token("why_expose_post");
	PO_new0_feas_exp_post_cid = mk_token("PO_new0_feas_exp_post");
	PO_new0_feas_exp_post_conj= mk_Conjecture(
												-- what: Judgement (use Sequent? Or just Assertion then)
												mk_Sequent(
													{mk_token("f"),mk_token("s")},
													[mk_token("new0_pre(f, s)")],
													mk_token("exists f', r & isBlock(r, s, f) and f' = f \\ locs_of(r, s)")
												),
												-- justifs: map JusId to Justification
												{ |-> },
												-- specialises: [ConjId] ??? or nil TODO
												PO_new0_feas_cid,
												-- provenance: seq of (Origin | Why)
												[FEAS_why,EXPOSE_POST_why]	
										);


	-- declared Heap0 body
	
	bdH0 : Body = 	mk_Body(
	  					--{bdVDMId},					
	  					<DataStructures>,	
	  						    	-- types			: set of TyId or map TyId to TyDefn
	  					{ Loc_tyId, F0_tyId },
	  								-- functions_: map FnId to FnInfo		
	  					{ locs_of_fid |-> locs_of_info,
	  						isBlock_fid |-> isBlock_info,
	  						new0_pre_fid|-> new0_pre_info,
	  						new0_post_fid|->new0_post_info
	  				  },		
	  								-- results		: ConjId to Conjecture
	  					{ PO_new0_feas_cid|->PO_new0_feas_conj },		
	  					{ |-> }, 	-- focuses		: FocusId to Focus
	  					{ |-> },	  -- strats		: StratId to Strategy
	  					{}					-- connections: set of (Relationship * BdId) 
					);
					
end MWhyHeap0