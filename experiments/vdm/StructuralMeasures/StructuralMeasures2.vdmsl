module StructuralMeasures2
exports all
definitions
types

    Number = nat;

    Variable = seq1 of char;

    Base = Number | Variable;

    Op = <Less> | <Plus>; 

    Expr = Structured | Base;

    Structured ::
        d: nat1
        lhs: Expr
        op: Op
        rhs: Expr
    inv mk_Structured(d, lhs, -, rhs) ==
        --(d = 0 <=> not is_S(lhs) and not is_S(rhs));
        --Exception in thread "LSP Listener" 
        --java.lang.StackOverflowError
        --
        --	at vdmj.LSPExpressionLocationFinder.caseExpression(LSPExpressionLocationFinder.java:58)
        --
        (d = 1 <=> is_Base(lhs) and is_Base(rhs));
        

functions
    depth: Expr -> nat
    depth(e) ==
        cases true:
            (is_Number(e)) -> 0,
            (is_Variable(e)) -> 0,
            (is_Structured(e)) -> e.d + depth(e.lhs) + depth(e.rhs)
        end
    measure
        depth(e);

values
    -- z + w < x + y 
    ex1: Structured = mk_Structured(2, mk_Structured(1, "z", <Plus>, "w"), <Less>, mk_Structured(1, "x", <Plus>, "y"));

--@doc fails with error "Error 4148: Measure function is called recursively: measure_depth line 27:9"
traces
    T1: depth(ex1);


state Test of  
  x: nat
init t == t = mk_Test(10)
end

operations

    M: nat ==> nat
    M(y) == (x := x + y; return x);

    N: () ==> nat
    N() == (let v: nat = 10 in M(v));

end StructuralMeasures2