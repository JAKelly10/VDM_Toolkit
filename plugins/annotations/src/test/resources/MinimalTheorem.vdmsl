module MinimalTheorem
exports all
definitions 
types 
    T = nat
    inv t == t > 10;

    --@doc fail as is an already declared name
    --@Theorem(T, 20 > 10)
    --@doc succeds by can't be proved by execution
    --@Theorem(T_Test, forall x: T & x > 0) 
    --@doc succeds and can be proved by execution
    --@Theorem(T_Test2, forall x in set  {1,2,3} & x > 0) 

functions 
    f: nat * nat1 -> nat1 
    f(x,y) == x + y;

    --Lemma(fProp1L, .....)

    --@doc succeds an can't be proved by execution
    --@Theorem(fProperty1, forall x: nat, y : nat1 & x < f(x,y) and y < f(x,y))

    g: nat -> nat
    g(x) == x;
end MinimalTheorem