
#############################################################################
package com.fujitsu.vdmj.tc.definitions to vdm2isa.tr.definitions;
#############################################################################

map TCDefinition{} to TRDefinition();
map TCDefinitionList{} to TRDefinitionList(this);
map TCDefinitionListList{} to TRDefinitionListList(this); 

map TCTypeDefinition{comments, annotations, name, nameScope, used, excluded, type, invPattern, invExpression, eqPattern1, eqPattern2, eqExpression, ordPattern1, ordPattern2, ordExpression, invdef, eqdef, orddef, mindef, maxdef, infinite, composeDefinitions} to TRTypeDefinition(comments, annotations, name, nameScope, used, excluded, type, invPattern, invExpression, eqPattern1, eqPattern2, eqExpression, ordPattern1, ordPattern2, ordExpression, invdef, eqdef, orddef, mindef, maxdef, infinite, composeDefinitions);
map TCExplicitFunctionDefinition{comments, annotations, name, nameScope, used, excluded, typeParams, type, paramPatternList, body, precondition, postcondition, isTypeInvariant, measureExp, isCurried, predef, postdef, paramDefinitionList, recursive, isUndefined} to TRExplicitFunctionDefinition(comments, annotations, name, nameScope, used, excluded, typeParams, type, paramPatternList, body, precondition, postcondition, isTypeInvariant, measureExp, isCurried, predef, postdef, paramDefinitionList, recursive, isUndefined);

# This is an important case to handle all TRDefinitionList within various parts, e.g., let x = 1 in x + 10;
map TCLocalDefinition{location, comments, annotations, name, nameScope, used, excluded, type} to TRLocalDefinition(location, comments, annotations, name, nameScope, used, excluded, type);
map TCValueDefinition{comments, annotations, nameScope, used, excluded, pattern, type, exp, expType, defs} to TRValueDefinition(comments, annotations, nameScope, used, excluded, pattern, type, exp, expType, defs);
map TCEqualsDefinition{location, comments, annotations, nameScope, used, excluded, pattern, typebind, bind, test, expType, defType, defs} to TREqualsDefinition(location, comments, annotations, nameScope, used, excluded, pattern, typebind, bind, test, expType, defType, defs);
map TCMultiBindListDefinition{location, comments, annotations, name, nameScope, used, excluded, bindings, defs} to TRMultiBindListDefinition(location, comments, annotations, name, nameScope, used, excluded, bindings, defs);

#############################################################################
package com.fujitsu.vdmj.tc.expressions to vdm2isa.tr.expressions;
#############################################################################

map TCExpression{} to TRExpression();
map TCExpressionList{} to TRExpressionList(this);
map TCElseIfExpressionList{} to TRElseIfExpressionList(this);
map TCMapletExpressionList{} to TRMapletExpressionList(this);
map TCRecordModifierList{} to TRRecordModifierList(this);
map TCCaseAlternativeList{} to TRCaseAlternativeList(this);

map TCBooleanLiteralExpression{exptype} to TRLiteralExpression(this, exptype); 
map TCCharLiteralExpression{exptype} to TRLiteralExpression(this, exptype);
map TCIntegerLiteralExpression{exptype} to TRLiteralExpression(this, exptype);
map TCRealLiteralExpression{exptype} to TRLiteralExpression(this, exptype);
map TCStringLiteralExpression{exptype} to TRLiteralExpression(this, exptype);
map TCQuoteLiteralExpression{exptype} to TRLiteralExpression(this, exptype);

map TCNotExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCAbsoluteExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCFloorExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCUnaryMinusExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCUnaryPlusExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);

map TCCardinalityExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCPowerSetExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCDistUnionExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCDistIntersectExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);

map TCLenExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCHeadExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCTailExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCIndicesExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCElementsExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCDistConcatExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCReverseExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);

map TCDistMergeExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCMapDomainExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCMapRangeExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);
map TCMapInverseExpression{exp, exptype} to TRUnaryExpression(this, exp, exptype);

map TCAndExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCOrExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCEquivalentExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCImpliesExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);

map TCEqualsExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCNotEqualExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCLessEqualExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCLessExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCGreaterEqualExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCGreaterExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);

map TCPlusExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCSubtractExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCTimesExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCDivExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCDivideExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCModExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCRemExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCStarStarExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);

map TCInSetExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCNotInSetExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCSetUnionExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCSetIntersectExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCSetDifferenceExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCSubsetExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCProperSubsetExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);

map TCSeqConcatExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCSubseqExpression{seq, from, to, exptype} to TRSubseqExpression(seq, from, to, exptype);

map TCPlusPlusExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCDomainResByExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCDomainResToExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCRangeResByExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCRangeResToExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCMapUnionExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);
map TCCompExpression{left, op, right, exptype} to TRBinaryExpression(left, op, right, exptype);

map TCSetRangeExpression{location, first, last, exptype} to TRSetRangeExpression(location, first, last, exptype);
map TCSetEnumExpression{location, members, exptype} to TRSetEnumExpression(location, members, exptype);
map TCSeqEnumExpression{location, members, exptype} to TRSeqEnumExpression(location, members, exptype);
map TCMapEnumExpression{location, members, exptype} to TRMapEnumExpression(location, members, exptype);
map TCMapletExpression{left, right} to TRMapletExpression(left, right);
map TCTupleExpression{location, args, exptype} to TRTupleExpression(location, args, exptype); 

map TCRecordModifier{tag, value} to TRRecordModifier(tag, value);
map TCMuExpression{location, record, modifiers, exptype} to TRMuExpression(location, record, modifiers, exptype);
map TCMkTypeExpression{typename, args, exptype} to TRMkTypeExpression(typename, args, exptype);
map TCFieldNumberExpression{tuple, field, type, exptype} to TRFieldNumberExpression(tuple, field, type, exptype);
map TCFieldExpression{object, field, exptype} to TRFieldExpression(object, field, exptype);

map TCNotYetSpecifiedExpression{location, exptype} to TRNotYetSpecifiedExpression(location, exptype);
map TCNarrowExpression{location, typename, basictype, test, typedef, exptype, exptype} to TRNarrowExpression(location, typename, basictype, test, typedef, exptype, exptype);
map TCIsExpression{location, typename, basictype, test, typedef, exptype} to TRIsExpression(location, typename, basictype, test, typedef, exptype);

map TCIotaExpression{location, bind, predicate, exptype} to TRIotaExpression(location, bind, predicate, exptype);
#map TCLambdaExpression{location, bindList, expression, type, exptype} to TRLambdaExpression(location, bindList, expression, type, exptype); 
#map TCLambdaExpression{location, bindList, expression, type, paramPatterns, paramDefinitions, exptype} to TRLambdaExpression(location, bindList, expression, type, paramPatterns, paramDefinitions, exptype); 
map TCLambdaExpression{location, bindList, expression, type, paramPatterns, paramDefinitions, def, exptype} to TRLambdaExpression(location, bindList, expression, type, paramPatterns, paramDefinitions, def, exptype); 
map TCExists1Expression{bind, predicate, exptype} to TRBoundedExpression(this, bind, predicate, exptype);
map TCExistsExpression{bindList, predicate, exptype} to TRBoundedExpression(this, bindList, predicate, exptype);
map TCForAllExpression{bindList, predicate, exptype} to TRBoundedExpression(this, bindList, predicate, exptype);
map TCLetBeStExpression{location, bind, suchThat, value, def, exptype} to TRLetBeStExpression(location, bind, suchThat, value, def, exptype);
map TCLetDefExpression{location, localDefs, expression, exptype} to TRLetDefExpression(this, location, localDefs, expression, exptype);
map TCDefExpression{location, localDefs, expression, exptype} to TRLetDefExpression(this, location, localDefs, expression, exptype);

map TCCasesExpression{location, exp, cases, others, exptype} to TRCasesExpression(location, exp, cases, others, exptype);
map TCCaseAlternative{location, pattern, result} to TRCaseAlternative(location, pattern, result);

map TCSetCompExpression{location, first, bindings, predicate, exptype} to TRSetCompExpression(location, first, bindings, predicate, exptype);
map TCSeqCompExpression{location, first, bind, predicate, exptype} to TRSeqCompExpression(location, first, bind, predicate, exptype);

map TCNilExpression{location, exptype, exptype} to TRNilExpression(location, exptype);
map TCApplyExpression{type, root, args, exptype} to TRApplyExpression(type, root, args, exptype);
map TCIfExpression{location, ifExp, thenExp, elseList, elseExp, exptype} to TRIfExpression(location, ifExp, thenExp, elseList, elseExp, exptype);
map TCElseIfExpression{location, elseIfExp, thenExp, exptype} to TRElseIfExpression(location, elseIfExp, thenExp, exptype);
map TCVariableExpression{location, name, original, vardef, exptype} to TRVariableExpression(location, name, original, vardef, exptype);

map TCPreExpression{location, function, args, exptype} to TRPreExpression(location, function, args, exptype);
map TCFuncInstantiationExpression{function, type, unresolved, actualTypes, expdef, exptype} to TRFunctionInstantiationExpression(function, type, unresolved, actualTypes, expdef, exptype);

#############################################################################
package com.fujitsu.vdmj.ast.lex to vdm2isa.lex;
#############################################################################
map LexCommentList{} to TRIsaVDMCommentList(this);
map LexComment{} to TRIsaVDMComment(this);

#unmapped com.fujitsu.vdmj.ast.lex.LexCommentList;

#############################################################################
package com.fujitsu.vdmj.tc.lex to vdm2isa.tr.lex;
#package com.fujitsu.vdmj.ast.lex to vdn2isa.tr.lex;
#############################################################################

unmapped com.fujitsu.vdmj.tc.lex.TCNameToken;
unmapped com.fujitsu.vdmj.tc.lex.TCNameList;
unmapped com.fujitsu.vdmj.tc.lex.TCIdentifierToken;
unmapped com.fujitsu.vdmj.ast.lex.LexIntegerToken;
unmapped com.fujitsu.vdmj.ast.lex.LexRealToken;
unmapped com.fujitsu.vdmj.ast.lex.LexKeywordToken;
unmapped com.fujitsu.vdmj.lex.LexLocation;
unmapped com.fujitsu.vdmj.tc.annotations.TCAnnotationList;
unmapped com.fujitsu.vdmj.typechecker.NameScope;


#############################################################################
package com.fujitsu.vdmj.tc.modules to vdm2isa.tr.modules;
#############################################################################

map TCModuleList{} to TRModuleList(this);
map TCModule{name, defs, files} to TRModule(name, defs, files);

#############################################################################
package com.fujitsu.vdmj.tc.patterns to vdm2isa.tr.patterns;
#############################################################################

map TCPattern{} to TRPattern();
map TCPatternList{} to TRPatternList(this);
map TCPatternListList{} to TRPatternListList(this); 
map TCBind{} to TRMultipleBind();
map TCMultipleBind{} to TRMultipleBind();
map TCMultipleBindList{} to TRMultipleBindList(this);
map TCTypeBindList{} to TRTypeBindList(this);

map TCSetBind{pattern, set} to TRMultipleSetBind(pattern, set);
map TCMultipleSetBind{plist, set} to TRMultipleSetBind(plist, set);
map TCSeqBind{pattern, sequence} to TRMultipleSeqBind(pattern, sequence);
map TCMultipleSeqBind{plist, sequence} to TRMultipleSeqBind(plist, sequence);
map TCTypeBind{pattern, type} to TRMultipleTypeBind(pattern, type);
map TCMultipleTypeBind{plist, type} to TRMultipleTypeBind(plist, type); 

map TCIdentifierPattern{} to TRBasicPattern(this);
map TCBooleanPattern{} to TRBasicPattern(this);
map TCCharacterPattern{} to TRBasicPattern(this);
map TCIntegerPattern{} to TRBasicPattern(this);
map TCQuotePattern{} to TRBasicPattern(this);
map TCRealPattern{} to TRBasicPattern(this);
map TCStringPattern{} to TRBasicPattern(this);
map TCNilPattern{} to TRBasicPattern(this);
map TCIgnorePattern{} to TRBasicPattern(this);

map TCSetPattern{plist} to TRStructuredPattern(this, plist);
map TCSeqPattern{plist} to TRStructuredPattern(this, plist);
map TCTuplePattern{plist} to TRStructuredPattern(this, plist);
map TCConcatenationPattern{left, right} to TRStructuredPattern(this, left, right);
map TCUnionPattern{left, right} to TRStructuredPattern(this, left, right);
map TCMapUnionPattern{left, right} to TRStructuredPattern(this, left, right);
map TCExpressionPattern{exp} to TRStructuredPattern(this, exp);

map TCMapletPattern{from, to} to TRStructuredPattern(this, from, to);
map TCRecordPattern{location, typename, plist, type} to TRRecordPattern(location, typename, plist, type);
map TCPatternBind{location, pattern, bind} to TRPatternBind(location, pattern, bind);

#############################################################################
package com.fujitsu.vdmj.tc.types to vdm2isa.tr.types;
#############################################################################
map TCType{} to TRType();
map TCInvariantType{} to TRInvariantType();
map TCTypeList{} to TRTypeList(this);
map TCTypeSet{} to TRTypeSet(this);
map TCFieldList{} to TRFieldList(this);

map TCFunctionType{location, definitions, parameters, partial, result} to TRFunctionType(location, definitions, parameters, partial, result);

map TCNaturalOneType{definitions} to TRBasicType(this, definitions);
map TCNaturalType{definitions} to TRBasicType(this, definitions);
map TCIntegerType{definitions} to TRBasicType(this, definitions);
map TCRationalType{definitions} to TRBasicType(this, definitions);
map TCRealType{definitions} to TRBasicType(this, definitions);
map TCBooleanType{definitions} to TRBasicType(this, definitions);
map TCCharacterType{definitions} to TRBasicType(this, definitions);
map TCTokenType{definitions} to TRBasicType(this, definitions);

map TCQuoteType{location, definitions, value} to TRQuoteType(location, definitions, value);
map TCProductType{location, definitions, types} to TRProductType(location, definitions, types);
map TCMapType{location, definitions, from, to} to TRMapType(this, location, definitions, from, to);
map TCInMapType{location, definitions, from, to} to TRMapType(this, location, definitions, from, to);
map TCNamedType{typename, definitions, type, invdef, eqdef, orddef} to TRNamedType(typename, definitions, type, invdef, eqdef, orddef);
map TCRecordType{name, definitions, fields, composed, invdef, eqdef, orddef} to TRRecordType(name, definitions, fields, composed, invdef, eqdef, orddef);
map TCField{tagname, type, equalityAbstraction} to TRField(tagname, type, equalityAbstraction);
map TCSetType{setof, definitions} to TRSetType(this, definitions, setof);
map TCSet1Type{setof, definitions} to TRSetType(this, definitions, setof);
map TCSeqType{seqof, definitions} to TRSeqType(this, definitions, seqof);
map TCSeq1Type{seqof, definitions} to TRSeqType(this, definitions, seqof);
map TCOptionalType{location, definitions, type} to TROptionalType(location, definitions, type);
map TCUnknownType{location, definitions} to TRUnknownType(location, definitions);
map TCUnionType{location, definitions, types} to TRUnionType(location, definitions, types);

#############################################################################
# Classes that are not mapped
#############################################################################

unmapped java.lang.Boolean;
unmapped java.lang.String;
unmapped java.lang.Long;
unmapped com.fujitsu.vdmj.mapper.FileList;

#############################################################################
# initializers, called by ClassMapper.init()
#############################################################################
init vdm2isa.lex.IsaTemplates.reset();
init vdm2isa.tr.types.TRRecordType.reset();

