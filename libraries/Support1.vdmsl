------------------------------------------------------------------------------------
--@header 
--@doc Copyright Leo Freitas 2019-2020 
--@v35, 17/10/2020
--@todo complete traces
------------------------------------------------------------------------------------
module Support1
imports
from VDMUtil
	functions
		set2seq					renamed set2seqVDM;
exports 
	types
		struct Precision                          ;
	functions                                   
		identity[@T]: @T -> @T                    ;
		xor: bool * bool -> bool                  ;
		max: int * int -> int                     ;
		min: int * int -> int                     ;
		maxs: set1 of int -> int                  ;
		mins: set1 of int -> int                  ;
		maxs_isa: set1 of int -> int              ;
		mins_isa: set1 of int -> int              ;
		minss: set1 of set1 of int -> int         ;
		minss_isa: set1 of set1 of int -> int     ;
		maxs_nat: set of nat -> nat               ;
		maxs_nat_isa: set of nat -> nat           ;
		mins_nat: set of nat -> nat               ;
		mins_nat_isa: set of nat -> nat           ;
		minss_nat: set of set of nat -> nat       ;
		minss_nat_isa: set of set of nat -> nat   ;
		sum: seq of int -> int                    ;
		prod: seq of int -> int                   ;
		prod_r: seq of real -> real               ;
		sums: set of int -> int                   ;
		prods_r: set of real -> real              ;
		average: seq of int -> int                ;
		averages: set of int -> int               ;
		average_r: seq of real -> real            ;
		averages_r: set of real -> real           ;
		nearest_precision: real * Precision * nat -> nat;
		approximate: real * Precision -> nat;
	  ordered: set of set1 of int * set of set1 of int -> bool         ;
	  well_ordered[@elem]: set of (@elem * set of set1 of int) -> bool ;
		unique_seq_inv[@T,@R]: seq of @T * (@T -> @R) -> bool    ;       
	  injective[@elem]: seq of @elem -> bool                   ;
		last[@e]: seq1 of @e -> @e                               ;
		take[@e]: nat * seq of @e -> seq of @e                   ;
		drop[@e]: nat * seq of @e -> seq of @e                   ;
		seq_prefix[@e]: seq of @e * seq of @e -> bool            ;
		seq_suffix[@e]: seq of @e * seq of @e -> bool            ;
		lasts[@e]: nat * seq of @e -> seq of @e                  ;
		starts_with_[@e]: seq of @e * seq of @e -> bool          ;
		disjoint[@elem]: seq of (set of @elem) +> bool           ;
	  fold1[@T]: (@T * @T -> @T) * seq1 of @T +> @T            ;
	  fold[@T]: (@T * @T -> @T) * @T * seq of @T +> @T         ;
		filter[@T]: seq of @T * (@T -> bool) -> seq of @T        ;
	  filter_elems[@T]: seq of @T * set of @T -> seq of @T     ;
	  seqMap[@T,@R]: (@T->@R) * seq of @T -> seq of @R         ;
		unzip[@T,@R]: seq of (@T * @R) -> (seq of @T * seq of @R);
		remove[@T] : @T * seq of @T -> seq of @T                 ;
		remove_all[@T]: @T * seq of @T -> seq of @T              ;
	  numOccurs[@T]: @T * seq of @T +> nat                     ;
	  set2seq[@elem]: set of @elem -> seq of @elem             ;
		replicate[@T]: nat * @T -> seq of @T                     ;
		xreplicate[@T]: nat * seq of @T -> seq of @T             ;
		lex_ord[@T]: /*set of (@T * @T) **/ seq of @T * seq of @T * (@T * @T -> bool) -> bool;
	  inSeq[@a]: @a * seq of @a +> bool                ;
		indexOf[@T]: @T * seq1 of @T -> nat1             ;
	  padLeft[@a]: seq of @a * @a * nat -> seq of @a   ;
	  padRight[@a]: seq of @a * @a * nat -> seq of @a  ;
	  sum_map[@D]: map @D to int -> int;
		
definitions 
------------------------------------------------------------------------------------
--@chapter Auxiliary functional library 
------------------------------------------------------------------------------------

------------------------------------------------------------------------------------
--@section Code generation constants
------------------------------------------------------------------------------------
values
	--@doc for certain heavely recursive functions, use iota instead (if possible) given the stack overflow limit roughly 850+10/20 for maxs({1,...VDM_STACK_SIZE})
	VDMJ_STACK_SIZE   : nat1               = 850;
  sum_const         : int * int -> int   = (lambda x: int, y: int & x+y);
  prod_const        : int * int -> int   = (lambda x: int, y: int & x*y);
  prod_r_const      : real * real -> real= (lambda x: real, y: real & x*y);
  leomax_const      : int * int -> int   = (lambda x: int, y: int & max(x,y));
  leomin_const      : int * int -> int   = (lambda x: int, y: int & min(x,y));
  mins_const        : set1 of int -> int = (lambda s: set1 of int & mins(s));
  mins_isa_const    : set1 of int -> int = (lambda s: set1 of int & mins_isa(s));
  mins_nat_const    : set of nat -> nat  = (lambda s: set of nat  & mins_nat(s));
	mins_nat_isa_const: set of nat -> nat  = (lambda s: set of nat  & mins_nat_isa(s));

types
	Precision = nat
	inv p == p mod 10 = 0;

functions	
------------------------------------------------------------------------------------
--@section Logic and arithmetic toolkit
------------------------------------------------------------------------------------

	identity[@T]: @T -> @T
	identity(t) == t;
	
	--@doc logical exclusive-or
	xor: bool * bool -> bool
	xor(x,y) == (x and not y) or (not x and y);

  --@doc fold-version of min/max over a set of int	
	max: int * int -> int
	max(x,y) == if x > y then x else y;
	
	min: int * int -> int
	min(x,y) == if x < y then x else y;
	
	maxs: set1 of int -> int
	maxs(s) == 
		(iota m in set s & (forall n in set s & n <= m))
	post
		forall x in set s & x <= RESULT;

	mins: set1 of int -> int
	mins(s) == 
		(iota m in set s & (forall n in set s & m <= n))
	post
		forall x in set s & RESULT <= x;
			
	--@doc max and min through fold - useful for later in Isabelle; stack overflows for large sets
	maxs_isa: set1 of int -> int
	maxs_isa(s) == fold1[int](leomax_const, set2seq[int](s))
	pre
		card s <= VDMJ_STACK_SIZE
	post
		forall x in set s & x <= RESULT;

	mins_isa: set1 of int -> int
	mins_isa(s) == fold1[int](leomin_const, set2seq[int](s))
	pre
		card s <= VDMJ_STACK_SIZE
	post
		forall x in set s & RESULT <= x;
	
	--@doc minimum of a non empty set of non-empty sets is the minimum of minimums 
	--		 this is calculated through mapping minimums within the set then the minnimal result 
	minss: set1 of set1 of int -> int
	minss(s) == mins(elems seqMap[set1 of int, int](mins_const, set2seq[set1 of int](s)));

	minss_isa: set1 of set1 of int -> int
	minss_isa(s) == mins_isa(elems seqMap[set1 of int, int](mins_isa_const, set2seq[set1 of int](s)));
	
	--@doc max of a set, default as 0 given it's fixed on nat for {}
	maxs_nat: set of nat -> nat
	maxs_nat(s) == if s = {} then 0 else maxs(s)
	post
		forall x in set s & x <= RESULT;

	maxs_nat_isa: set of nat -> nat
	maxs_nat_isa(s) == fold[nat](leomax_const, 0, set2seq[int](s))
	post
		forall x in set s & x <= RESULT;

	--@doc max of a set, default as maximum within the set, which will zero if empty
	mins_nat: set of nat -> nat
	mins_nat(s) == if s = {} then 0 else mins(s)
	post
		forall x in set s & RESULT <= x;

	mins_nat_isa: set of nat -> nat
	mins_nat_isa(s) == fold[nat](leomin_const, maxs_nat_isa(s), set2seq[int](s))
	post
		forall x in set s & RESULT <= x;

	--@doc as with minss but for nat allows for maxs_nat default (or zero for empty)
	minss_nat: set of set of nat -> nat
	minss_nat(s) == mins_nat(elems seqMap[set of nat, nat](mins_nat_const, set2seq[set of nat](s)))
	post
		forall x in set dunion s & RESULT <= x;

	minss_nat_isa: set of set of nat -> nat
	minss_nat_isa(s) == mins_nat_isa(elems seqMap[set of nat, nat](mins_nat_isa_const, set2seq[set of nat](s)))
	post
		forall x in set dunion s & RESULT <= x;
		
	sum: seq of int -> int
	sum(ss) == fold[int](sum_const,0,ss);

	prod: seq of int -> int
	prod(ss) == fold[int](prod_const,0,ss);
	
	prod_r: seq of real -> real
	prod_r(ss) == fold[real](prod_r_const,0,ss);
	
	sums: set of int -> int
	sums(s) == sum(set2seq[int](s));
	
	prods_r: set of real -> real
	prods_r(s) == prod_r(set2seq[real](s));
	 
	average: seq of int -> int
	average(ss) == if len ss = 0 then 0 else sum(ss) div len ss;
	
	averages: set of int -> int
	averages(s) == average(set2seq[int](s));	

	average_r: seq of real -> real
	average_r(ss) == if len ss = 0 then 0 else sum(ss) / len ss;
	
	averages_r: set of real -> real
	averages_r(s) == average_r(set2seq[real](s));	

	--@doc approximate the given real to the given precision and cut_off
	--		 e.g. nearest_precision(137.558, 100, 50) = 138
	--					nearest_precision(137.558,  10,  5) = 137
	--					nearest_precision(137.558, 100, 60) = 137
	nearest_precision: real * Precision * nat -> nat
	nearest_precision(r, precision, cut_off) ==
		let
			 floored: nat = floor(r) * precision,				 --floor(137.635) * 100 = 137 * 100      = 13700
	  		 whole: nat = floor(r * precision),        --floor(137.635 * 100) = floor(13763.5) = 13763
	  		 delta: nat = max(0,whole - floored),			 --13763 - 13700 = 63 ; 63 > 100/2?
	  	 --cut_off: nat = precision div 2,
	  	    pad : nat = (if delta > cut_off then 1 else 0)
		 in
		 	--Trace(floored, whole, delta, cut_off, pad)
		 	--@Printf("floored=%1s, whole=%2s, delta=%3s, cut_off=%4s, pad=%5s", floored, whole, delta, cut_off, pad)
		 	(floored div precision) + pad
	pre
		cut_off <= precision;
		
	approximate: real * Precision -> nat
	approximate(r, precision) == nearest_precision(r, precision, precision div 2);
	
	
------------------------------------------------------------------------------------
--@section Set toolkit
------------------------------------------------------------------------------------
		
	--@doc checks that a set of ranges (allowing for negative ranges) is ordered; that is
	--		 their left maximum is within their right minimum 
  ordered: set of set1 of int * set of set1 of int -> bool
  ordered(left, right) ==
    --@doc if either of the sets of sets is empty, then it's ordered; othewise min-max it
    left <> {} and right <> {} => maxs(dunion left) < mins(dunion right);
   
  --@doc checks that a set of ranges for a given enum type @elem which has a defined order is ordered
  well_ordered[@elem]: set of (@elem * set of set1 of int) -> bool
  well_ordered(rs) == 
    forall mk_(t1,r1), mk_(t2,r2) in set rs & t1 < t2 => ordered(r1, r2)
  --pre ord_@elem is defined
  ;

	--@doc generalised uniqueness invariant for what is expected to be a record of type @T, where
	--		 its uniqueness is determined by some field of type @T within it. If @T itself, @T=@R; 
	--		 ex: Measurement sequences are unique by name and no other field. In that case, Measurement is
	--		 already the case given the ":-" equality predicates; for Doses, this is not the case and we have
	--		 to "extract" all names of interest and transfor seq of Dose into seq of Id.   
	unique_seq_inv[@T,@R]: seq of @T * (@T -> @R) -> bool
	unique_seq_inv(s, seed) == 
		--@doc as opposed to injective[Measurement](s) or injective[Id]([ s(i).name | i in set inds s ]) 
		injective[@R](seqMap[@T,@R](seed, s));
		  
------------------------------------------------------------------------------------
--@section Sequence toolkit
------------------------------------------------------------------------------------

  injective[@elem]: seq of @elem -> bool
  injective(s) == len s = card elems s;

	--@doc last of a non-empty sequence
	last[@e]: seq1 of @e -> @e
	last(s) == s(len s);
	
	take[@e]: nat * seq of @e -> seq of @e
	take(n, s) == s(1,...,n)
	--pre n <= len s
	post
		len RESULT = min(n, len s)
		and
		elems RESULT subset elems s;
	
	drop[@e]: nat * seq of @e -> seq of @e
	drop(n, s) == s(n + 1,...,len s)
	--pre n <= len s
	post
		len RESULT = max(0, len s - n)
		and
		elems RESULT subset elems s;
	
	--@doc checks whether s is prefix closed with t (i.e. subseq of t).
	seq_prefix[@e]: seq of @e * seq of @e -> bool
	seq_prefix(s,t) == 
		(s = t) or (s = []) or (len s <= len t and (exists i in set inds t & s = take[@e](i, t)))
	post
		--@OnFail("seq prefix %1$s [= %2$s", s, t)
		(RESULT 
		 =>
		 (elems s subset elems t
		  and
		  len s <= len t
		 )
		);

	seq_suffix[@e]: seq of @e * seq of @e -> bool
	seq_suffix(s,t) == 
		(s = t) or (s = []) or (len s <= len t and (exists i in set inds t & s = drop[@e](i, t)))
	post
		--@OnFail("seq suffix %1$s [= %2$s", s, t)
		(RESULT 
		 =>
		 (elems s subset elems t
		  and
		  len s <= len t
		 )
		);
	
	--@doc for given count/range, get the last elements of given sequence by getting the
	--	  subsequence from index len s minus the requested amount +1 (i.e. sequences are 1-indexed).
	--
	--	  this could assume that the requested count is within s and delivers a result bound by s 
	--     (i.e. RESULT sequence size and elements within s) and exactly c in size.   
	lasts[@e]: nat * seq of @e -> seq of @e
	lasts(n, s) == 
		drop[@e](max(0, len s - n), s)--s(len s - n + 1,...,len s)
	--pre n <= len s
	post
		len RESULT = min(n, len s)
		and
		elems RESULT subset elems s;
	
	--@doc s starts with t
	starts_with_[@e]: seq of @e * seq of @e -> bool
	starts_with_(s, t) == 
		len t <= len s 
		and
		t = s(1,...,len t);
		
	--@doc generalised disjointness of sets
	--@todo use fold? allow for set of rather than seq of? 
	disjoint[@elem]: seq of (set of @elem) +> bool
	disjoint(s) ==
		-- empty or singleton sequences are trivially disjoint
		(len s > 1) 
		=> 
		-- other sequences of sets are disjoint if they are pairwise disjoint to all higher indexes (e.g., slightlty more efficient than POST?)
		len s = card { i | i in set inds s & forall j in set inds s & j > i => s(i) inter s(j) = {} } 
	--post
	--	RESULT => (forall i, j in set inds s & i <> j => s(i) inter s(j) = {}) -- BAD PERFORMANCE
	;

  --@doc Fold (iterate, accumulate, reduce) a binary function over a non-empty sequence.
  --     The function is assumed to be associative.
  fold1[@T]: (@T * @T -> @T) * seq1 of @T +> @T
  fold1(f, s) == 
  	if len s = 1 then
  		hd s
  	else
  		let lens: nat1 = len s in
  			f(fold1[@T](f,s(1,...,lens div 2)), fold1[@T](f,s((lens div 2)+1,...,lens)))
  --pre forall x,y,z:@T & f(x,f(y,z)) = f(f(x,y),z)
  measure 
  	len s;

  --@doc Fold (iterate, accumulate, reduce) a binary function over a sequence.
  --     The function is assumed to be associative and have an identity element.
  fold[@T]: (@T * @T -> @T) * @T * seq of @T +> @T
  fold(f, e, s) == 
  	if s = [] then
  		e
  	else if len s = 1 then
  		hd s
  	else
  		let lens: nat1 = len s in
	  		f(fold[@T](f,e,s(1,...,lens div 2)), fold[@T](f,e,s((lens div 2)+1,...,lens)))
  --@doc pre not possible to refer to @T
  --pre (exists x:@T & forall y:@T & f(x,y) = y and f(y,x) = y)
  --and forall x,y,z:@T & f(x,f(y,z)) = f(f(x,y),z)
  measure 
  	len s;

  --@doc finds all the elements in given sequence where the search criteria is true
	filter[@T]: seq of @T * (@T -> bool) -> seq of @T
	filter (l,search) ==	[i | i in seq l & search(i)]
	post
		len RESULT <= len l
		and
		elems RESULT subset elems l
		and
		(forall i in seq RESULT & search(i));
  
  --@doc finds all elements within set within sequence (like Z's  (S |^ s) harpoon)
  filter_elems[@T]: seq of @T * set of @T -> seq of @T
  filter_elems(l,s) == filter[@T](l, (lambda x: @T & x in set s))
	post
		len RESULT <= len l
		and
		elems RESULT subset (elems l) inter s
		and
		(forall i in set inds RESULT & RESULT(i) in set s);
		  
	--@doc Apply a function to all elements of a sequence.
  seqMap[@T,@R]: (@T->@R) * seq of @T -> seq of @R
  seqMap(f,s) == [ f(s(i)) | i in set inds s ]
  --@todo @NB: how go express this one? POG?
  --pre elems s subset dom f
  --pre forall i in set inds s & pre_f(s(i)) --?  
  post len RESULT = len s;

	unzip[@T,@R]: seq of (@T * @R) -> (seq of @T * seq of @R)
	unzip(s) == mk_([ s(i).#1 | i in set inds s ], [ s(i).#2 | i in set inds s ])
	post
		let mk_(xs,ys) = RESULT in
			len xs = len s
			and
			len ys = len s
			and
			{ mk_(xs(i), ys(i)) | i in set inds s } = elems s;

	--@doc remove x from seq if it exists or else returns original seq
	remove[@T] : @T * seq of @T -> seq of @T 
	remove (x,l) ==
		if x in set elems l then
		  let i in set inds l be st l(i) = x in
		    l(1,...,i-1) ^ l(i+1,...,len l) 
		else
			l
	post
		elems RESULT subset elems l
		and
		(x in set elems l => len RESULT + 1 = len l);
	
	remove_all[@T]: @T * seq of @T -> seq of @T
	remove_all(x, l) ==
		[ l(i) | i in set inds l & x <> l(i) ]
	post
		elems RESULT subset elems l
		and
		len l = len RESULT + numOccurs[@T](x, l);
					  	
	--@doc The number of times an element appears in a sequence.
  numOccurs[@T]: @T * seq of @T +> nat
  numOccurs(e,sq) == len [ 0 | i in set inds sq & sq(i) = e ];
	
  --@doc fast transformation between sets to sequences, irrespective of whether
  --		 elem is orderable or not. 
  set2seq0[@elem]: set of @elem * seq of @elem -> seq of @elem
  set2seq0(s, r) == 
  	if s = {} then r else let x in set s in set2seq0[@elem](s \ {x}, r^[x])
  measure 
  	card s;
  		
  set2seq[@elem]: set of @elem -> seq of @elem
  set2seq(s) == 
  	--@todo @NB this only works for orderable i's in s?
  	--[ i | i in set s ]
  	--set2seq0[@elem](s, [])
  	set2seqVDM[@elem](s)--@doc for speed, but keep it for post condition
  post
  	injective[@elem](RESULT);

	--@doc replicate x n times; + len [] to emphasise the weird behaviour of padRight. 
	--@doc ex. recplicate[char](2, 'L') = ['L', 'L', 'L']; 
	replicate[@T]: nat * @T -> seq of @T
	replicate(n, x) == 
		--padRight[@T]([], x, n + len [])
		xreplicate[@T](n, [x])
	post
		post_xreplicate[@T](n, [x], RESULT);

	--@todo make it high order on the seq perhaps?
	--@doc given a seq, make each of its elements n times
	--		 ex. xreplicate[nat](3, [1,2]) = [1,1,1,2,2,2] 
	xreplicate[@T]: nat * seq of @T -> seq of @T
	xreplicate(n, s) == 
		--conc [ padRight[@T]([], s(i), n + len []) | i in set inds s ]
		conc [ [ s(i) | - in set {1,...,n} ] | i in set inds s ]
	post
		if n = 0 then
			RESULT = []
		else
			(elems RESULT = elems s
			 and
			 len RESULT = n * len s
			);

	--@doc see Isabelle List.thy lexord and List_LexOrder.thy
	lex_ord[@T]: /*set of (@T * @T) **/ seq of @T * seq of @T * (@T * @T -> bool) -> bool
	lex_ord(x, y, less_xy) == 
		seq_prefix[@T](x, y) 
		or
		(x <> [] and y <> [] and less_xy(hd x, hd y) and lex_ord[@T](tl x, tl y, less_xy))
	measure
		min(len x, len y);

 -- Does an element appear in a sequence?
  inSeq[@a]: @a * seq of @a +> bool
  inSeq(e,s) == e in set elems s;

	indexOf[@T]: @T * seq1 of @T -> nat1
	indexOf(x,xs) == 
	  let i in set inds xs be st xs(i) = x in i
	pre
		inSeq[@T](x,xs)
	post	
		xs(RESULT) = x;		

  -- Pad a sequence on the left with a given item up to a specified length.
  padLeft[@a]: seq of @a * @a * nat -> seq of @a
  padLeft(sq,x,n) == [ x | - in set {1 ,..., n - len sq} ] ^ sq;

  -- Pad a sequence on the right with a given item up to a specified length.
  padRight[@a]: seq of @a * @a * nat -> seq of @a
  padRight(sq,x,n) == sq ^ [ x | - in set {1 ,..., n - len sq} ];	
  
------------------------------------------------------------------------------------
--@section Map toolkit
------------------------------------------------------------------------------------
  	
  sum_map0[@D]: map @D to int * int -> int
  sum_map0(m, r) ==
  	if m = {|->} then
  		r
  	else
  		let x in set dom m in
  			sum_map0[@D]({x}<-:m, r + m(x))
  measure
  	card dom m;
  
  sum_map[@D]: map @D to int -> int
  sum_map(m) == sum_map0[@D](m, 0)
  post
  	(is_(rng m, set of nat) => RESULT >= 0); 
	
------------------------------------------------------------------------------------
--@section Traces
------------------------------------------------------------------------------------
		
traces
	T_xor: let x in set {true,false} in let y in set {true,false}\{x} in xor(x,y);
	--take[nat](0, [1,2,3,4]) = []
	--take[nat](3, [1,2,3,4]) = [1,2,3]
	--take[nat](5, [1,2,3,4]) = [1,2,3,4]

end Support1