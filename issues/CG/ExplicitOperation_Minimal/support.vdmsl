module support
imports
from VDMUtil
	functions
		val2seq_of_char renamed val2str
,
from IO
	operations
		print renamed print
		printf renamed printf
,
from MATH
  operations 
    rand renamed rand
exports 
	types
		struct LogLevel
		struct Trace

	operations
		set_log_level: LogLevel ==> ()
		get_log_level: () ==> LogLevel
		get_trace: () ==> Trace
		print_trace: () ==> ()
		reset_trace: () ==> ()
		log: LogLevel * String ==> ()
		logf: LogLevel * String * seq of ? ==> ()
		tlog: LogLevel * ? * String ==> ()
		tlogf: LogLevel * ? * String * seq of ? ==> ()
		fresh_random: () ==> int
		--new_random: int ==> int
definitions 

types

	String = seq1 of char;
	
	Trace = seq of String;
	
	--@todo decouple LogLevel from support to be free; namely no <MDS> just numbers?
	LogLevel = <Debug> | <Verbose> | <Todo> | <Info> | <Trace> | <Concurrency> | <Warning> | <Stack> | <MDS> | <Error> | <Fatal>; 
		
functions

	--@doc maps all domain elements to given range r; executes if @D is enumerable
	--@todo/code-gen
	--map_to[@D,@R]: @R -> map @D to @R
	--map_to(r) ==
	--	{ d |-> r | d : @D }
	--post
	--	rng RESULT = {r};
	
	--@doc identity map	
	--@todo/code-gen
	--map_id[@D]: () -> map @D to @D
	--map_id() == { d |-> d | d : @D }
	--post
	--	dom RESULT = rng RESULT;

	seq_of[@T]: @T * nat1 -> seq1 of @T
	seq_of(v, l) == [ v | - in seq [ p | p in set {1,...,l} ] ];
				
---------------------------------------------------------------
-- Generic functions for VDM data types
---------------------------------------------------------------

  --@doc works so long as @T is enumerable (e.g. boolean, all enums, etc; tend to always get the first value
  --@todo/code-gen
  --any[@T]: () -> @T
  --any() == let x in set { i | i : @T } in x;

	last[@T]: seq1 of @T -> @T
	last(s) == s(len s);
  
	indexOf[@T]: @T * seq of @T -> [nat1]
	indexOf(x,xs) == 
		if x in set elems xs then
		  let i in set inds xs be st xs(i) = x in i
		else
			nil
	post	
		RESULT <> nil => x in set elems xs and xs(RESULT) = x;

	--@doc poor man's version of a enumerated type test? 
	enum_typed[@T]: @T -> bool
	enum_typed(t) == 
		let result: String = val2str[@T](t) in 
			len result > 2
			and
			hd result = '<' and last[char](result) = '>';
	
	--@doc09 removes mk_ and (...) from record name, e.g. mk_Record(field1,...,fieldn) = Record
	record_name[@T]: @T -> String
	record_name(r) == 
		let result: String = val2str[@T](r) in result(4,...,indexOf[char]('(', result)-1)
	pre
		record_typed[@T](r);
	
	--@doc09 poor man's version of record type test; doesn't consider tuples, e.g. mk_(x,y); minimum size mk_R()	
	record_typed[@T]: @T -> bool
	record_typed(r) == 
		let result: String = val2str[@T](r) in
			len result > 5 -- minimum size len "mk_R()" = 6
			and
			result(1,...,3) = "mk_"
			and
			result(4) <> '('
			and
			indexOf[char]('(',result) <> nil;
		
	log_level2nat: LogLevel -> nat
	log_level2nat(ll) ==
		cases ll: 
			<Debug>   -> 0,
			<Verbose> -> 1,
			<Todo>		-> 2,
			<Info> 		-> 3,
			<Trace>   -> 4,
			<Concurrency> -> 5,
			<Warning> -> 6,
			<Stack>		-> 7,
			<MDS> 		-> 8,
			<Error>		-> 9,
			<Fatal>   -> 10
		end; 
	
	log_level_leq: LogLevel * LogLevel +> bool
	log_level_leq(ll1, ll2) == log_level2nat(ll1) <= log_level2nat(ll2);
	
	level_trace: LogLevel -> String
	level_trace(level) == "[" ^ val2str[LogLevel](level) ^ "]: " ^ (if level = <Info> then "\t## " else "\t"); 
	
	make_trace: LogLevel * ? * String * seq of char -> String
	make_trace(level, tag, trace, extra) == 
		let tag': seq of char = (if tag <> nil then "(" ^ val2str[?](tag) ^ ")" else []) in
			level_trace(level) ^ tag' ^ trace ^ extra ^ "\n";
	
values
	DEFAULT_LOG_LEVEL: LogLevel = <Trace>;
		
  SEED      : int = 2000;
	MAX_RANDOM: int = 2000;
		
state Support_MDS of
  log_level: LogLevel
	log_trace: Trace
	used: set of int
	seed: int
inv mk_Support_MDS(-,-,-,seed) == seed <= MAX_RANDOM
init smds == smds = mk_Support_MDS(DEFAULT_LOG_LEVEL, [], {},SEED)	
end

operations

  new_random0() r: int ==
    return (rand(seed) mod MAX_RANDOM)
  post
    r <= MAX_RANDOM;
  
  --@doc generates a random number according to the given seed, might be same in multiple calls 
  /*
  new_random(seed_param: int) r: int ==
    (seed := seed_param;
     return new_random0())
  pre
    seed_param <= MAX_RANDOM
  post
    r <= MAX_RANDOM;
	*/
	
	--@doc ensures that returned random number is fresh/unique with respect to the seed set earlier
  fresh_random() r: int ==
    (dcl aux: int := 0;
        (while  (aux in set used) do
          aux := new_random0();
        );
        used := used union {aux};
        return aux)
  post
    r not in set used~
    and
    r in set used
    and
    r <= MAX_RANDOM;

	set_log_level(level: LogLevel) ==
		log_level := level
	ext
		wr log_level
	post
		log_level = level;
		
	pure get_log_level: () ==> LogLevel
	get_log_level() == return log_level;
		
	pure get_trace: () ==> Trace
	get_trace() == return log_trace;
	
	reset_trace() ==
		(log_trace := [];
		)
	ext
		wr log_trace
	post
		log_trace = [];
	
	print_trace() ==
		for s in log_trace do
			print(s)
	ext 
		rd log_trace;
		
	--@doc = logs the given trace if within log level with a trailing new line 
	log(level: LogLevel, msg: String) ==
		tlog(level, nil, msg);
	
	--@doc = logs the given trace if within log level with a trailing new line after the parameters
	--			 works like a simplified version of Java's printf
	logf(level: LogLevel, msg: String, params: seq of ?) ==
		tlogf(level, nil, msg, params);

	--@doc09 = tagged version of logging, if present. Useful to classify locally beyond chosen log level (e.g. Warning that is serious)
	--			   could have been [String], but using '?' to be flexible.
	tlog(level: LogLevel, tag: ?, msg: String) ==
		(
		log_trace := log_trace ^ [make_trace(level, tag, msg, "")]; 
		if log_level_leq(log_level, level) then
			print(last[String](log_trace))
		)
	ext
		rd log_level
		wr log_trace
	post
		elems log_trace~ subset elems log_trace
		and
		len log_trace~ < len log_trace;		
		
	tlogf(level: LogLevel, tag: ?, msg: String, params: seq of ?) ==
		(
		--@doc09 needed a formatf to handle this...
		log_trace := log_trace ^ [make_trace(level, tag, msg, "(" ^ val2str[seq of ?](params) ^ ")")];
		if log_level_leq(log_level, level) then 	
			printf(make_trace(level, tag, msg, ""), params);
		)
	ext
		rd log_level
		wr log_trace
	post
		elems log_trace~ subset elems log_trace
		and
		len log_trace~ < len log_trace;
			 
end support