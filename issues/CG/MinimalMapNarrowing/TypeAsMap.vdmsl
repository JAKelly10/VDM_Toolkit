-- This file is automatically generated from XSD source
-- without any manual change/adjustment needed
module TypeAsMap
imports 
from BasicTypes
	types
		String renamed String
		--@CG: these two will be difficult to infer for VDM CG :-( 
		TypeForX renamed TypeForX
		TypeForY renamed TypeForY
,
from TypeAsRecord
	types
		TypeAsRecord renamed TypeAsRecord
		
-- *export the map type without struct and record type with struct
-- *export the function signatures as defined below
exports
  types
    --@doc08 don't struct export because of [?] target type
    --@doc09 requires struct for type checking between MDSType and ?
		struct TypeAsMap
  functions
    type2map: TypeAsRecord -> TypeAsMap
    type_map2rec: TypeAsMap -> TypeAsRecord
    type_map_update[@T]: TypeAsMap * String * @T -> TypeAsMap
		type_map2rec_narrow_partial: TypeAsMap -> TypeAsRecord
		type_map2rec_narrow_complete: TypeAsMap -> TypeAsRecord
definitions 

types
  -- * map view of the same record type: String to unknown type (?) that can be nil
  -- * invariant states that the domain of map is exactly the same names as the OUTERMOST xs:element names ONLY
	TypeAsMap = map String to ?
	inv map_ == dom map_ = { 
		"some.name:x",
		"some.name:y" };

functions
	
  -- * function converting the record to the map
  -- * signature pattern matches the input with names, which can be the same as the non-qualified xs:element
  -- * map has xs:element name mapped to (|->) the corresponding pattern matched record field 
	type2map: TypeAsRecord -> TypeAsMap
	type2map(mk_TypeAsRecord(
		x,
		y)) ==
		{
			"some.name:x" |-> x,
			"some.name:y" |-> y
		};

  -- * update function receives map, string name, and generic type
  -- * this is always the same for every created converter, but the function name
  type_map_update[@T]: TypeAsMap * String * @T -> TypeAsMap
  type_map_update(map_, key, val) == 
    map_ ++ { key |-> val }
  pre
    key in set dom map_
    and
    is_(map_(key),@T);


	-- ===== PROBLEM IS BELOW ====
		
  -- * other way round just calls the map with all the xs:element names to build the record
  -- * because of invariant, the names are always in the domain so map_(“NAME”) is always defined
  -- * this re establishes the record invariant
	type_map2rec: TypeAsMap -> TypeAsRecord
	type_map2rec(map_) ==
		mk_TypeAsRecord(
			--@CG: this is where the Java error comes from as:
			--Error: The constructor TypeAsRecord_Module.TypeAsRecord(Object, Object) is undefined
			--/* TypeAsMap.vdmsl 54:9 */
			--return new TypeAsRecord_Module.TypeAsRecord(Utils.get(map_, "some.name:x"), Utils.get(map_, "some.name:y"));
			map_("some.name:x"),
			map_("some.name:y")
		);

	--@CG: This version doesn't generate errors, but I expected it to fail at "y", given single narrow_ fix at "x".
	-- 
	--		 this version will be troublesome to generate because of the need for transitive type discovery
	--		 from XSDs without enough type information in some cases :-(... So added it manually TypeForX + its import.
	type_map2rec_narrow_partial: TypeAsMap -> TypeAsRecord
	type_map2rec_narrow_partial(map_) ==
		mk_TypeAsRecord(
			--@CG: I played with this to see if it would work, expecting to reduce the errors by 1 (on x, but not on y).
			--		 In this example, the GC casts x and not y; but in one, it casts everything to (Object), thus no errors, despite missing narrow_ casts? 
			--		 Worse, it actually provides some funny casts, not related to the ones I added. See below for the actual case...
			narrow_(map_("some.name:x"), TypeForX),
			map_("some.name:y")
		);

	--@CG: This version I guess is the ideal one if I had full knowledge of type imports to make
	type_map2rec_narrow_complete: TypeAsMap -> TypeAsRecord
	type_map2rec_narrow_complete(map_) ==
		mk_TypeAsRecord(
			narrow_(map_("some.name:x"), TypeForX),
			narrow_(map_("some.name:y"), TypeForY)
		);

end TypeAsMap